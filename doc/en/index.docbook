<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN" "dtd/kdedbx45.dtd" [
  <!ENTITY kdiff3 "<application>KDiff3</application>">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % English "INCLUDE">
]>

<book lang="&language;">

<!-- This header contains all of the meta-information for the document such
as Authors, publish date, the abstract, and Keywords -->

<bookinfo>
<title>The &kdiff3; Handbook</title>

<authorgroup>
  <othercredit role="developer">
    <firstname>Michael</firstname>
    <surname>Reeves</surname>
    <affiliation><address>
    <email>reeves.87@gmail.com</email>
    </address></affiliation>
  </othercredit>
  <othercredit role="developer">
    <firstname>Joachim</firstname>
    <surname>Eibl</surname>
    <affiliation><address>
    <email>joachim.eibl at gmx.de</email>
    </address></affiliation>
  </othercredit>
<!-- TRANS:ROLES_OF_TRANSLATORS -->
</authorgroup>

<copyright>
<year>2002-2007</year>
<holder>Joachim Eibl</holder>
</copyright>
<copyright>
<year>2017-2019</year>
<holder>Michael Reeves</holder>
</copyright>
<!-- Translators: put here the copyright notice of the translation -->
<!-- Put here the FDL notice.  Read the explanation in fdl-notice.docbook
     and in the FDL itself on how to use it. -->
<legalnotice>&FDLNotice;</legalnotice>

<!-- Date and version information of the documentation
Don't forget to include this last date and this last revision number, we
need them for translation coordination !
Please respect the format of the date (YYYY-MM-DD) and of the version
(V.MM.LL), it could be used by automation scripts.
Do NOT change these in the translation. -->

<date>2019-02-22</date>
<releaseinfo>1.08.70</releaseinfo>


<abstract>
<para>
   &kdiff3; is a file and folder diff and merge tool which
<itemizedlist>
<listitem><para>compares and merges two or three text input files or folders,</para></listitem>
<listitem><para>shows the differences line by line and character by character(!),</para></listitem>
<listitem><para>provides an automatic merge-facility,</para></listitem>
<listitem><para>has an editor for comfortable solving of merge-conflicts,</para></listitem>
<listitem><para>provides network transparency via KIO,</para></listitem>
<listitem><para>has options to highlight or hide changes in white-space or comments,</para></listitem>
<listitem><para>supports Unicode, UTF-8 and other file encodings,</para></listitem>
<listitem><para>prints differences,</para></listitem>
<listitem><para>supports version control keyword and history merging.</para></listitem>
</itemizedlist>
</para><para>
   This document describes &kdiff3;-version 1.10.6.
</para>
</abstract>

<!-- This is a set of Keywords for indexing by search engines.
Please at least include KDE, the KDE package it is in, the name
 of your application, and a few relevant keywords. -->

<keywordset>
<keyword>KDE</keyword>
<keyword>kdiff3</keyword>
<keyword>diff</keyword>
<keyword>merge</keyword>
<keyword>CVS</keyword>
<keyword>triple diff</keyword>
<keyword>compare</keyword>
<keyword>files</keyword>
<keyword>folders</keyword>
<keyword>directories</keyword>
<keyword>version control</keyword>
<keyword>three-way-merge</keyword>
<keyword>in-line-differences</keyword>
<keyword>synchronise</keyword>
<keyword>kpart</keyword>
<keyword>kio</keyword>
<keyword>network transparent</keyword>
<keyword>editor</keyword>
<keyword>white space</keyword>
<keyword>comments</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction"><title>Introduction</title>
<sect1 id="why"><title>Yet Another Diff Frontend?</title>
<para>
Several graphical diff tools exist. Why choose &kdiff3;? Let me say, why I wrote it.
</para><para>
&kdiff3; started because I had to do a difficult merge. Merging is necessary when several
people work on the same files in a project. A merge can be somewhat automated, when the
merge-tool not only has the new modified files (called "branches"), but also the original file
(called "base"). The merge tool will automatically choose any modification that was only
done in one branch. When several contributors change the same lines, then the merge tool
detects a conflict which must be solved manually.
</para><para>
The merge then was difficult because one contributor had changed many things and corrected
the indentation in many places. Another contributor also had changed much text in the same file,
which resulted in several merge conflicts.
</para><para>
The tool I used then, only showed the changed lines, but not what had changed within these
lines. And there was no information about where only the indentation was changed. The merge
was a little nightmare.
</para><para>
So this was the start. The first version could show differences within a line and showed white space differences.
Later many other features were added to increase the usefulness.
</para><para>
For example if you want to compare some text quickly, then you can copy it to the clipboard and
paste it into either diff window.
</para><para>
A feature that required a big effort was the folder comparison and merge facility, which turned
the program almost into a full file browser.
</para><para>
I hope &kdiff3; works for you too. Have fun!
</para><para>
Joachim Eibl (2003)
</para>
</sect1>

<sect1 id="screenshots"><title>Screenshots and Features</title>
<para>This screenshot shows the difference between two text files (using an early version of &kdiff3;):</para>
<screenshot><mediaobject>
   <imageobject><imagedata fileref="screenshot_diff.png" format="PNG"/></imageobject>
</mediaobject></screenshot>

<para>
   3-way-merging is fully supported. This is useful if two people change code independently.
   The original file (the base) is used to help &kdiff3; to automatically select the correct
   changes.
   The merge-editor below the diff-windows allows you to solve conflicts, while showing you the output you will get.
   You can even edit the output.
   This screenshot shows three input files being merged:
</para><para>
<screenshot><mediaobject>
   <imageobject><imagedata fileref="screenshot_merge.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
</para>

<para id="dirmergebigscreenshot">&kdiff3; also helps you to compare and merge complete folders.
This screenshot shows &kdiff3; during a folder merge:
</para><para>
<screenshot><mediaobject>
   <imageobject><imagedata fileref="dirmergebig.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
</para>
</sect1>

<sect1 id="features"><title>More Features</title>
<sect2><title> Line-By-Line And Char-By-Char Diff-Viewer</title>
<para>By using the possibilities of a graphical color display &kdiff3; shows
   exactly what the difference is. When you have to do many code-reviews, you will like this.
</para>
<screenshot><mediaobject>
   <imageobject><imagedata fileref="letter_by_letter.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
</sect2>

<sect2><title> See White-Space Differences At One Glance</title>
<para>Spaces and tabs that differ appear visibly. When lines differ only
   in  the  amount of white space this can be seen at one look in the summary
   column on the left side. (No more worries when people change the indentation.)
</para>
<screenshot><mediaobject>
   <imageobject><imagedata fileref="white_space.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
</sect2>

<sect2><title> Triple-Diff</title>
<para> Analyze three files and see where they differ.
</para><para>
   The left/middle/right windows are named <guilabel>A</guilabel>/<guilabel>B</guilabel>/<guilabel>C</guilabel> and have the blue/green/magenta color respectively.
</para><para>
   If one file is the same and one file is different on a line then the
   color   shows which file is different. The red color means that both other
   files  are different.
</para>
<screenshot><mediaobject>
   <imageobject><imagedata fileref="triple_diff.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
</sect2>

<sect2><title> Comfortable Merge Of Two Or Three Input Files</title>
<para> &kdiff3; can be used to merge two or three input files and automatically
   merges as much as possible. The result is presented in an editable window
   where most conflicts can be solved with a single mouseclick: Select the
   respective <guibutton>...</guibutton> buttons at the <guilabel>A</guilabel>/
   <guilabel>B</guilabel>/<guilabel>C</guilabel> windows to select the source
   that should be used. You can also select more than one source. Since this
   output window is an editor even conflicts which need further corrections
   can be solved here without requiring another tool.
</para>
</sect2>

<sect2><title>And ...</title>
<itemizedlist>
   <listitem><para>Fast navigation via buttons.</para></listitem>
   <listitem><para>A mouse-click into a summary column sync's all windows to show the same position.</para></listitem>
   <listitem><para>Select and copy from any window and paste into the merge result window.</para></listitem>
   <listitem><para>Overview column that shows where the changes and conflicts are.</para></listitem>
   <listitem><para>The colors are adjustable to your specific preferences.</para></listitem>
   <listitem><para>Adjustable Tab size.</para></listitem>
   <listitem><para>Option to insert spaces instead of tabs.</para></listitem>
   <listitem><para>Open files comfortably via dialog or specify files on the command line.</para></listitem>
   <listitem><para>Search for strings in all text windows with <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> (<keycombo>&Ctrl;<keycap>F</keycap></keycombo>) and <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find Next</guimenuitem></menuchoice> (<keycap>F3</keycap>) menu items.</para></listitem>
   <listitem><para>Show the line numbers for each line. </para></listitem>
   <listitem><para>Paste clipboard or drag text into a diff input window.</para></listitem>
   <listitem><para>Network transparency via KIO.</para></listitem>
   <listitem><para>Can be used as diff-viewer from the &kdevelop; 3.</para></listitem>
   <listitem><para>Word-wrap for long lines.</para></listitem>
   <listitem><para>Support for Unicode, UTF-8 and other codecs.</para></listitem>
   <listitem><para>Support for right to left languages.</para></listitem>
   <listitem><para>...</para></listitem>
</itemizedlist>
</sect2>
</sect1>
</chapter>

<chapter id="documentation"><title>File Comparison And Merge</title>

<sect1 id="commandline"><title>Command-Line Options</title>

<sect2><title>Comparing 2 files: </title>
<screen>
   <command>kdiff3</command> <replaceable>file1 file2</replaceable>
</screen>
</sect2>

<sect2><title>Merging 2 files: </title>
<screen>
   <command>kdiff3</command> <replaceable>file1 file2</replaceable> -m
   <command>kdiff3</command> <replaceable>file1 file2</replaceable> -o <replaceable>outputfile</replaceable>
</screen>
</sect2>

<sect2><title>Comparing 3 files: </title>
<screen>
   <command>kdiff3</command> <replaceable>file1 file2 file3</replaceable>
</screen>
</sect2>

<sect2><title>Merging 3 files: </title>
<screen>
   <command>kdiff3</command> <replaceable>file1 file2 file3</replaceable> -m
   <command>kdiff3</command> <replaceable>file1 file2 file3</replaceable> -o <replaceable>outputfile</replaceable>
</screen>
<para>
   Note that <replaceable>file1</replaceable> will be treated as
   base of <replaceable>file2</replaceable> and
   <replaceable>file3</replaceable>.
</para>
</sect2>

<sect2><title>Special case: Files with the same name </title>
<para>
If all files have the same name but are in different folders, you can
reduce typework by specifying the filename only for the first file, &eg;:
</para>
<screen>
   <command>kdiff3</command> <replaceable>folder1/filename folder2 folder3</replaceable>
</screen>
</sect2>

<sect2><title>Commandline for starting a folder comparison or merge: </title>
<para>This is very similar, but now it's about folders.</para>
<screen>
   <command>kdiff3</command> <replaceable>folder1 folder2</replaceable>
   <command>kdiff3</command> <replaceable>folder1 folder2</replaceable> -o <replaceable>destdir</replaceable>
   <command>kdiff3</command> <replaceable>folder1 folder2 folder3</replaceable>
   <command>kdiff3</command> <replaceable>folder1 folder2 folder3</replaceable> -o <replaceable>destdir</replaceable>
</screen>
<para>For folder comparison and merge you can continue to read <link linkend="dirmerge">here</link>.</para>
</sect2>

<sect2><title>Other command line options</title>
<para>To see all available command line options type</para>
<screen>
<command>kdiff3</command> --help
</screen>
<para>Example output:</para>
<screen>
Options:
  -m, --merge               Merge the input.
  -b, --base file           Explicit base file. For compatibility with certain tools.
  -o, --output file         Output file. Implies -m. E.g.: -o newfile.txt
  --out file                Output file, again. (For compatibility with certain tools.)
  --noauto                  Ignore --auto and always show GUI.
  --auto                    No GUI if all conflicts are auto-solvable. (Needs -o file)
  --L1 alias1               Visible name replacement for input file 1 (base).
  --L2 alias2               Visible name replacement for input file 2.
  --L3 alias3               Visible name replacement for input file 3.
  -L, --fname alias         Alternative visible name replacement. Supply this once for every input.
  --cs string               Override a config setting. Use once for every setting. E.g.: --cs "AutoAdvance=1"
  --confighelp              Show list of config settings and current values.
  --config file             Use a different config file.
</screen>
<para>The option <option>--cs</option> allows you to adjust a configuration value that is otherwise only adjustable via the configure dialogs.
But be aware that when &kdiff3; then terminates the changed value will be stored along with the other settings.
With <option>--confighelp</option> you can find out the names of the available items and current values.</para>
<para>Via <option>--config</option> you can specify a different config file. When you often use &kdiff3;
with completely different setups this allows you to easily switch between them.</para>
</sect2>
<sect2><title>Ignorable command line options</title>
<para>Many people want to use &kdiff3; with some version control system. But when that version control system calls &kdiff3; using command line parameters that &kdiff3; doesn't recognise, then &kdiff3; terminates with an error.
The <guilabel>Integration</guilabel> item in the settings dialog allow to specify command line parameters that should be ignored by &kdiff3;.
They will appear in the usage help like in this example:</para>
<screen>
  --<replaceable>foo</replaceable>                     Ignored. (User defined.)
</screen>
<variablelist>
  <varlistentry><term><guilabel>Command line options to ignore:</guilabel></term><listitem><para>
     A list of options, separated via semicolon ';'. When one of these options appears on the commandline,
     then &kdiff3; will ignore it and run without reporting an error.
     (Default is "<literal>u;query;html;abort</literal>").</para></listitem></varlistentry>
</variablelist>
<para>When this isn't enough, then it is recommended to write a shell script that does the option translation.</para>
</sect2>

</sect1>

<sect1 id="opendialog"><title>Open-Dialog</title>
<para>
   Since many input files must be selectable, the program has a special open dialog:
</para>
<screenshot><mediaobject>
<imageobject><imagedata fileref="open_dialog.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
<para>
   The open dialog allows you to edit the filenames by hand, selecting a file
   via the file-browser via the <guibutton>File...</guibutton> button or allows
   you to choose recent files from the drop-down lists. If you open the dialog
   again, then the current names still remain there. The third input file is not
   required. If the entry for <guilabel>C</guilabel> remains empty, then only a
   two file diff analysis will be done.
</para><para>
   You can also select a folder via the <guibutton>Folder...</guibutton> button.
   If for <guilabel>A</guilabel> a folder is specified then a folder-comparison
   /merge starts. If <guilabel>A</guilabel> specifies a file but <guilabel>B</guilabel>,
   <guilabel>C</guilabel> or the output specify a folder, then &kdiff3; uses the
   filename from <guilabel>A</guilabel> in the specified folders.
</para><para>
   If <guilabel>Merge</guilabel> check box is selected, then the <guilabel>Output</guilabel>
   line becomes editable. But it is not required to specify the output filename
   immediately. You can also postpone this until saving.
</para><para>
   The <guibutton>Configure...</guibutton> button opens the settings dialog, so that you can set
   the options before running the analysis.
</para>
</sect1>

<sect1 id="pasteinput"><title>Paste and Drop Input</title>
<para>
   Sometimes you want to compare parts of a text that is not an own file. &kdiff3; also
   allows you to paste text from the clipboard into the diff input window that has the focus.
   The diff analysis happens immediately then.
   In the open dialog you need not specify files then, but just close it via <guibutton>Cancel</guibutton> button.
</para><para>
   You can also use drag and drop: Drag a file from a file manager
   or selected text from an editor and drop it onto a diff input window.
</para><para>
   What's the idea? Sometimes a file contains two similar functions, but checking how similar
   they really are is a big effort if you first must create two files and then load them. Now
   you can simply copy, paste and compare the relevant sections.
</para><note><para>
   Currently you cannot drag anything from &kdiff3;. Only dropping in the diff input
   is supported.
</para></note><warning><para>
   Some editors still interpret the drag and drop into another program like cut
   (instead of copy) and paste. Your original data might be lost then.
</para></warning>
</sect1>

<sect1 id="interpretinginformation"><title>Comparing Files And Interpreting The Information In The Input Windows</title>
<screenshot><mediaobject>
<imageobject><imagedata fileref="screenshot_diff.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
<sect2><title>Info Line</title><para>
   At the top of each text window is its "info line". The info lines of
   the input windows contain a letter <guilabel>A</guilabel>, <guilabel>B</guilabel>
   or <guilabel>C</guilabel>, the editable filename, a button for browsing, and the
   line number of the first visible line in the window. (Note that window <guilabel>C</guilabel>
   is  optional.) Each info line appears in a different color.
</para><para>
   When you selected another file via browsing or finished editing the filename here
   by pressing &Enter;, the new file will be loaded and
   compared with the already loaded file(s).
</para></sect2><sect2><title>Coloring</title><para>
   The three input windows are assigned the letters <guilabel>A</guilabel>, <guilabel>B</guilabel>
   and <guilabel>C</guilabel>.
   <guilabel>A</guilabel> has color blue, <guilabel>B</guilabel> has green and <guilabel>C</guilabel>
   has magenta. (These are the defaults, but can be changed in the <guilabel>Color</guilabel>
   item in the settings dialog.)
</para><para>
   When a difference is detected then the color shows which input file differs.
   When both other input files differ then the color used to express this is
   red by default (<guilabel>Conflict color</guilabel> option in the <guilabel>Color</guilabel>
   item in the settings dialog). This colorscheme is especially useful in the
   case of three input files, which will be seen in the next section
   (<link linkend="merging">Merging</link>).
</para></sect2><sect2><title>Summary Column</title><para>
   Left of each text is the "summary" column. If differences occurred on a
   line then the summary column shows the respective color. For a white-space-only
   difference the summary is chequered. For programming languages where white
   space is not so important this is useful to see at one glance if anything
   of importance was modified. (In C/C++ white space is only interesting within
   strings, comments, for the preprocessor, and some only very esoteric situations.)
</para><para>
   The vertical line separating the summary column and the text is interrupted
   if the input file had no lines there. When word-wrap is enabled then this vertical
   line appears dotted for wrapped lines.
</para></sect2><sect2><title>Overview Column</title><para>
   On the right side a "overview" column is visible left of the vertical scrollbar.
   It shows the compressed summary column of input <guilabel>A</guilabel>. All the differences
   and conflicts are visible at one glance. When only two input windows are
   used, then all differences appear red here because every difference is
   also a conflict. A black rectangle frames the visible part of the inputs.
   For  very long input files, when the number of input lines is bigger than
   the height of the overview column in pixels, then several input lines share
   one overview line. A conflict then has top priority over simple differences,
   which have priority over no change, so that no difference or conflict is
   lost here. By clicking into this overview column the corresponding text
   will be shown.
</para></sect2><sect2 id="manualdiffhelp"><title>Manually Aligning Lines</title><para>
   Sometimes the algorithm places the wrong lines next to each other. Or you want to compare
   one piece of text with text at a completely different position in the other file.
   For these situations you can manually instruct &kdiff3; to align certain lines.
   Mark the text for which you want to improve the alignment with the mouse as you would
   for copy and paste in the first diff view and then choose <menuchoice><guimenu>Diffview</guimenu><guimenuitem>Add Manual Diff Alignment</guimenuitem></menuchoice> menu item (<keycombo>&Ctrl;<keycap>Y</keycap></keycombo>). An orange bar will appear in
   the summary column next to the chosen text. Repeat this for the second and
   (if available) third diff view. &kdiff3; will immediately recalculate the differences everytime you do this,
   and will align the chosen lines. Of course some of the previously matching lines in between
   might not match anymore.
</para><para>
   Currently merging doesn't support the use of manual diff help.
</para></sect2><sect2 id="joinsplitsections"><title>Manually Joining and Splitting Diff Sections</title><para>
   In some cases &kdiff3; will see too many or too few diff sections for merging. In such a
   case you can join or split existing sections.
</para><para>
   Add new sections by first selecting text in the lines that belong together in either input window (as for copying to the clipboard).
   Then choose <menuchoice><guimenu>Merge</guimenu><guimenuitem>Split Diff At Selection</guimenuitem></menuchoice> menu item.
   Splits will be added above the first line and below the last line of the selected text.
   If you only want to add one section, then select text beginning at another section-split.
</para><para>
   For joining sections in either input window select something in the lines from the sections to join.
   (You can join several sections in one step too.) Then choose <menuchoice><guimenu>Merge</guimenu><guimenuitem>Join Selected Diffs</guimenuitem></menuchoice> menu item.
</para></sect2>
</sect1>


<sect1 id="merging"><title>Merging And The Merge Output Editor Window</title>
<screenshot><mediaobject>
<imageobject><imagedata fileref="screenshot_merge.png" format="PNG"/></imageobject>
</mediaobject></screenshot>
<para>
   The merge output editor window (below the diff input windows) also has an info line at the top showing <guilabel>Output:</guilabel>, the filename and <replaceable>[Modified]</replaceable> tag if you edited something. Usually it will contain some text through the automatic merge facilities, but often it will also contain conflicts.
</para><para>
!!! Saving is disabled until all conflicts are resolved !!! (Use the <guibutton>Go to Previous/Next Unsolved Conflict</guibutton> buttons to find the remaining conflicts.)
</para><para>
   With only two input files every difference is also a conflict that must
   be solved manually.
</para><para>
   With three input files the first file is treated as base, while the second and third input files contain modifications. When at any line only either input <guilabel>B</guilabel> or input <guilabel>C</guilabel> have changed but not both then the changed source will automatically be selected. Only when <guilabel>B</guilabel> and <guilabel>C</guilabel> have changed on the same lines, then the tool detects a conflict that must be solved manually. When <guilabel>B</guilabel> and <guilabel>C</guilabel> are the same, but not the same as <guilabel>A</guilabel>, then <guilabel>C</guilabel> is selected.
</para><sect2><title>The Summary Column</title><para>
   The merge output editor window also has a summary column on the left. It shows the
   letter of the input from which a line was selected or nothing if all three
   sources where equal on a line. For conflicts it shows a questionmark "?"
   and the line shows "&lt;Merge Conflict&gt;", all in red. Because solving
   conflicts  line by line would take very long, the lines are grouped into
   groups that  have the same difference and conflict characteristics.
   But only-white-space-conflicts are separated from non-white-space-conflicts
   in order to ease the merging of files were the indentation changed for many
   lines.
</para></sect2><sect2 id="synchronise_views"><title>Setting The Current Group And Synchronising Merge And Diff View Position</title><para>
   When clicking into the summary column with the &LMB; in either window then the beginning of the group belonging to that line will shown in all windows. This group then becomes the "current group". It is highlighted with the <guilabel>Current range diff background color</guilabel> option of <guilabel>Integration</guilabel> item in the settings dialog and a black bar appears on the left side of the text.
</para></sect2><sect2><title>Choosing Inputs A, B or C For Current Conflict And Editing</title><para>
   The Button bar below the menubar contains three input selector buttons containing the letters <guilabel>A</guilabel>, <guilabel>B</guilabel> and <guilabel>C</guilabel>. Click the input selector button to insert (or remove if already inserted) the lines from the respective source. To choose the lines from several inputs click the respective buttons in the needed order. For example if you want that the lines from <guilabel>B</guilabel> appear before the lines from <guilabel>A</guilabel> in the output, first click <guilabel>B</guilabel>, then <guilabel>A</guilabel>.
</para><para>
   If you use the <guibutton>Automatically Go to Next Unsolved Conflict After Source Selection</guibutton> button (see <link linkend="autoadvance">Auto-Advance</link> section), you should disable this before choosing lines from several inputs or if you want to edit the lines after your choice. Otherwise &kdiff3; will jump to the next conflict after choosing the first input.
</para><para>
   It is often helpful directly edit the merge output.
   The summary column will show "m" for every line that was manually modified.
   When for instance the differences are aligned in a way that simply choosing
   the inputs won't be satisfactory, then you can mark the needed text and use
   normal <link linkend="selections">copy and paste</link> to put it into the merge output.
</para><para>
   Sometimes, when a line is removed either by automatic merge or by editing
   and no other lines remain in that group, then the text &lt;No src line&gt;
   will appear in that line. This is just a placeholder for the group for
   when  you might change your mind and select some source again. This text won't
   appear in the saved file or in any selections you want to copy and paste.
</para><para>
   The text "&lt;Merge Conflict&gt;" will appear in the clipboard if you
   copy and   paste some text containing such a line. But still be careful to
   do so.
</para></sect2><sect2><title>Choosing Input A, B, or C for All Conflicts</title><para>
   The normal merge will start by solving simple conflicts automatically. But the <guimenu>Merge</guimenu> menu provides some actions for other common needs. If you have to select the same source for most conflicts, then you can choose <guilabel>A</guilabel>, <guilabel>B</guilabel> or <guilabel>C</guilabel> everywhere, or only for the remaining unsolved conflicts, or for unsolved white space conflicts. If you want to decide every single delta yourself, you can <guimenuitem>Set Deltas to Conflicts</guimenuitem>. Or if you want to return to the automatic choices of &kdiff3; then select <guimenuitem>Automatically Solve Simple Conflicts</guimenuitem>. &kdiff3; then restarts the merge. For actions that change your previous modifications &kdiff3; will ask for your confirmation before proceeding.
</para><note><para>
   When choosing either source for unsolved white space conflicts and the <guilabel>Ignore numbers (treat as white space)</guilabel> or <guilabel>Ignore C/C++ comments (treat as white space)</guilabel> options at <guilabel>Diff</guilabel> item in the settings dialog are used then changes in numbers or comments will be treated like white space too.

</para></note></sect2><sect2 id="vcskeywordsmergesupport"><title>Automatic Merge of Version Control Keywords and History (Log)</title><para>
   Many version control systems support special keywords in the file. (&eg; "<literal>&#36;Date&#36;</literal>", "<literal>&#36;Header&#36;</literal>", "<literal>&#36;Author&#36;</literal>", "<literal>&#36;Log&#36;</literal>", &etc;) During the check-in the version control system (VCS) changes these lines. For instance "<literal>&#36;Date&#36;</literal>" will turn into "<literal>&#36;Date: 2005/03/22 18:45:01 &#36;</literal>". Since this line will be different in every version of the file, it would require manual interaction during the merge.
</para><para>
   &kdiff3; offers automatic merge for these items at <guilabel>Merge</guilabel> item in the settings dialog. For simple lines that match the <guilabel>Auto merge regular expression</guilabel> option in all input-files &kdiff3; will choose the line from <guilabel>B</guilabel> or - if available - from <guilabel>C</guilabel>. (Additionally it is necessary that the lines in question line up in the comparison and the previous line contains no conflict.) This auto merge can either be run immediately after a merge starts (activate the option <guilabel>Run regular expression auto merge on merge start</guilabel>) or later via <menuchoice><guimenu>Merge</guimenu><guimenuitem>Run Regular Expression Auto Merge</guimenuitem></menuchoice> menu item.
</para><para>
   Automatic merge for version control history (also called "log") is also supported. The history automerge can either run immediately when the merge starts by activating the option <guilabel>Merge version control history on merge start</guilabel> at <guilabel>Merge</guilabel> item in the settings dialog or later via the <menuchoice><guimenu>Merge</guimenu><guimenuitem>Automatically Solve History Conflicts</guimenuitem></menuchoice> menu item.
</para><para>
   Usually the version control history begins with a line containing the keyword "<literal>&#36;Log&#36;</literal>". This must be matched by the <guilabel>History start regular expression:</guilabel> option. &kdiff3; detects which subsequent lines are in the history by analysing the leading characters that came before the "<literal>&#36;Log&#36;</literal>" keyword. If the same "leading comment" characters also appears in the following lines, then they are also included in the history.
</para><para>
During each check-in the VCS writes a unique line specifying version-, date- and time-information
followed by lines with user comments.
These lines form one history-entry. This history section grows with every check-in and the
most recent entries appear at the top (after the history start line).
</para><para>
When for parallel development two or more developers check-in a branch of the file then
the merge history will contain several entries that appear as conflicts during the merge
of the branches. Since merging these can become very tedious, &kdiff3; offers support with two
possible strategies: Just insert the history information from both contributors at the top
or sort the history information by a user defined key.
</para><para>
   The just-insert-all-entries-method is easier to configure. &kdiff3; just needs a method to detect, which lines belong to one history entry. Most VCS insert an empty line after each history entry. If there are no other empty lines, this is a sufficient criterion for &kdiff3;. Just set an empty <guilabel>History entry start regular expression</guilabel> at <guilabel>Merge</guilabel> item in the settings dialog. If the empty line criterion isn't sufficient, you can specify a regular expression to detect the history entry start.
</para><para>
Note that &kdiff3; will remove duplicate history entries. If a history entry appeared several times
in the history of a input file, only one entry will remain in the output.
</para><para>
   If you want to sort the history, then you have to specify how the sort key should be built. Use parentheses in the <guilabel>History entry start regular expression</guilabel> at <guilabel>Merge</guilabel> item in the settings dialog to group parts of the regular expression that should later be used for the sort key. Then specify the <guilabel>History entry start sort key order</guilabel> option specifying a comma "," separated list of numbers referring to the position of the group in the regular expression.
</para><para>
   Because this is not so easy to get right immediately, you are able to test and improve the regular expressions and key-generation in a dedicated dialog by pressing the <guibutton>Test your regular expressions</guibutton> button.
</para><para>Example: Assume a history that looks like this:
</para>
<screen>
/**************************************************************************
** HISTORY:    &#36;Log: \toms_merge_main_view\MyApplication\src\complexalgorithm.cpp &#36;
**
**     \main\integration_branch_12   2 Apr 2001 10:45:41   tom
**  Merged branch simon_branch_15.
**
**     \main\henry_bugfix_branch_7\1   30 Mar 2001 19:22:05   henry
**  Improved the speed for subroutine convertToMesh().
**  Fixed crash.
**************************************************************************/
</screen>
<para>
   The history start line matches the regular expression "<literal>.*\&#36;Log.*\&#36;.*</literal>". Then follow the history entries.
</para><para>
   The line with the "<literal>&#36;Log&#36;</literal>" keyword begins with two "*" after which follows a space. &kdiff3; uses the first non-white-space string as "leading comment" and assumes that the history ends in the first line without this leading comment. In this example the last line ends with a string that also starts with two "*", but instead of a space character more "*" follow. Hence this line ends the history.
</para><para>
If history sorting isn't required then the history entry start line regular expression
could look like this. (This line is split in two because it wouldn't fit otherwise.)
</para>
<screen>
\s*\\main\\\S+\s+[0-9]+ (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)
 [0-9][0-9][0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]\s+.*
</screen>
<para>
   For details about regular expressions please see the <ulink url="https://doc.qt.io/qt-5/qregularexpression.html">regular expression documentation</ulink>. Note that "<literal>\s</literal>" (with lowercase "<literal>s</literal>") matches any white space and "<literal>\S</literal>" (with uppercase "<literal>S</literal>") matches any non-white-space. In our example the history entry start contains first the version info with reg. exp. "<literal>\\main\\\S+</literal>", the date consisting of day "<literal>[0-9]+</literal>", month "<literal>(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)</literal>" and year "<literal>[0-9][0-9][0-9][0-9]</literal>", the time "<literal>[0-9][0-9]:[0-9][0-9]:[0-9][0-9]</literal>" and finally the developers login name "<literal>.*</literal>".
</para><para>
   Note that the "leading comment" characters (in the example "<literal>**</literal>") will already be removed by &kdiff3; before trying to match, hence the regular expression begins with a match for none or more white-space characters "<literal>\s*</literal>". Because comment characters can differ in each file (&eg; C/C++ uses other comment characters than a Perl script) &kdiff3; takes care of the leading comment characters and you should not specify them in the regular expression.
</para><para>
If you require a sorted history. Then the sortkey must be calculated. For this the
relevant parts in the regular expression must be grouped by parentheses.
(The extra parentheses can also stay in if history sorting is disabled.)
</para>
<screen>
\s*\\main\\(\S+)\s+([0-9]+) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)
 ([0-9][0-9][0-9][0-9]) ([0-9][0-9]:[0-9][0-9]:[0-9][0-9])\s+(.*)
</screen>
<para>
   The parentheses now contain <literal>1</literal>. version info, <literal>2</literal>. day, <literal>3</literal>. month, <literal>4</literal>. year, <literal>5</literal>. time, <literal>6</literal>. name.
   But if we want to sort by date and time, we need to construct a key with the elements in a different order of appearance:
   First the year, followed by month, day, time, version info and name. Hence the sortkey order to specify is "<literal>4,3,2,5,1,6</literal>".
</para><para>
   Because  month names aren't good for sorting ("<literal>Apr</literal>" would be first) &kdiff3; detects in which order the month names were given and uses that number instead ("<literal>Apr</literal>" -&gt; "<literal>04</literal>"). And if a pure number is found it will be transformed to a 4-digit value with leading zeros for sorting. Finally the resulting sort key for the first history entry start line will be:
</para>
<screen>
2001 04 0002 10:45:41 integration_branch_12   tom
</screen>
<para>
For more information also see <link linkend="mergeoptions">Merge Settings</link> section.
</para>
</sect2>
</sect1>

<sect1 id="navigation"><title>Navigation And Editing</title>
<para>
   Much navigation will be done with the scroll bars and the mouse but you can also navigate with the keys. If you click into either window then you can use the shortcuts &Left;, &Right;, &Up;, &Down;, &PgUp;, &PgDn;,  &Home;, &End;, <keycombo>&Ctrl;&Home;</keycombo> and <keycombo>&Ctrl;&End;</keycombo> as you would in other programs. The overview-column next to the vertical scroll bar of the input files can also be used for navigating by clicking into it.
</para><para>
   You can also use the <mousebutton>wheel</mousebutton> mouse to scroll up and down.
</para><para>
   In the merge output editor you can also use the other keys for editing.
   You can toggle between insert and overwrite mode with the &Ins; key. (Default
   is insert-mode.)
</para><para>
   A click with the &LMB; into any summary column will synchronise all
   windows to show the beginning of the same group of lines (as explained
   in section <link linkend="synchronise_views">Setting The Current Group And Synchronising Merge And Diff View Position</link>).
</para><para>
   The Button bar also contains nine navigation buttons with which you can
   jump to the current/first/last difference, to the previous/next difference
   (<keycombo>&Ctrl;&Down;</keycombo>/<keycombo>&Ctrl;&Up;</keycombo>), to the
   previous/next conflict (<keycombo>&Ctrl;&PgDn;</keycombo>/<keycombo>&Ctrl;&PgUp;</keycombo>),
   or to the previous/next unsolved conflict. Note that for &kdiff3; a "conflict"
   that was not automatically solved at the start of the merge stays a "conflict"
   even if it is solved. Hence the necessity to distinguish "unsolved conflicts".
</para>
<sect2 id="autoadvance"><title>Auto-Advance</title>
<para>
   There also is a button <guibutton>Automatically Go to Next Unsolved Conflict After
   Source Selection</guibutton> (Auto-Advance). If you enable this, then, when one source
   is selected, &kdiff3; will jump to and select the next unsolved conflict
   automatically. This can help when you always want to choose one source only.
   When you need both sources, or you want to edit after selecting, then you
   probably want to switch this off. Before proceeding to the next unsolved conflict
   &kdiff3; shows you the effect of your choice for a short time. This delay is
   adjustable in the <guilabel>Merge</guilabel> item in the settings dialog: You can
   specify the <guilabel>Auto advance delay (ms):</guilabel> in milli seconds between 0 and 2000. Hint:
   Tired of many clicks? - Use a small Auto-Advance-delay and the shortcuts
   <keycombo>&Ctrl;<keycap>1</keycap></keycombo>/<keycap>2</keycap>/<keycap>3</keycap>
   to select <guilabel>A</guilabel>/<guilabel>B</guilabel>/<guilabel>C</guilabel> for many conflicts.
</para>
</sect2>
</sect1>

<sect1 id="selections"><title>Select, Copy And Paste</title>
<para>
   The input windows don't show a cursor, so selections must be made with the
   mouse by clicking with the &RMB; at the start, holding down the
   mousebutton and moving to the end, where you release the mouse button again.
   You can also select a word by double clicking it. In the merge output editor
   you can also select via the keyboard by holding the &Shift; key and
   navigation with the cursor keys.
</para><para>
   If the selection exceeds the visible range you can move the mouse over the
   window borders which causes &kdiff3; to scroll in that direction.
</para><para>
   For very large selections you can also use the navigation keys while holding down
   the mouse. E.g. use &PgUp; and &PgDn; to quickly go to a certain position. At the
   end position release the mouse button.
</para><para>
   In order to select everything in the current window use <menuchoice><guimenu>Edit</guimenu>
   <guimenuitem>Select All</guimenuitem></menuchoice> menu item (<keycombo>&Ctrl;<keycap>A</keycap></keycombo>).
</para><para>
   To copy to the clipboard you must press the <guibutton>Copy</guibutton> button (<keycombo>&Ctrl;<keycap>C</keycap></keycombo> or <keycombo>&Ctrl;&Ins;</keycombo>). But there exists an option <guilabel>Auto copy selection</guilabel> at <guilabel>Editor</guilabel> item in the settings dialog. If this is enabled, then whatever you select is copied immediately and you don't need to explicitly copy. But pay attention when using this because the contents of the clipboard might then be destroyed accidentally.
</para><para>
   <guibutton>Cut</guibutton> (<keycombo>&Ctrl;<keycap>X</keycap></keycombo> or <keycombo>&Shift;&Del;</keycombo>) copies to the clipboard and deletes the selected text.
</para><para>
   <guibutton>Paste</guibutton> (<keycombo>&Ctrl;<keycap>V</keycap></keycombo> or <keycombo>&Shift;&Ins;</keycombo>)
   inserts the text in the clipboard at the cursorposition or over the current selection.
   If you paste to either diff input window the contents of the clipboard will
   be shown in that window and the comparison will restart immediately. This is
   useful if you want to quickly grab a piece of text from somewhere and
   compare it with something else without first creating files.
</para>
</sect1>

<sect1 id="saving"><title>Saving</title>
<para>
   Saving will only be allowed, when all conflicts were solved. If the file already exists and the <guilabel>Backup files</guilabel> option is enabled at <guilabel>Folder</guilabel> item in the settings dialog then the existing file will be renamed with an <literal role="extension">.orig</literal> extension, but if such a file exists it will be deleted. When you exit or start another diff-analysis and data wasn't saved yet, then &kdiff3; will ask if you want to save, cancel or proceed without saving. (&kdiff3; does not catch any signals. So if you "kill" a &kdiff3; instance then your data will be lost.)
</para><para>
   Line endings are saved according to the normal method on the underlying operating system. For Unices each line ends with an linefeed-character "<literal>\n</literal>", while for Win32-based systems each line ends with a carriage-return + a linefeed "<literal>\r\n</literal>". &kdiff3; does not preserve the line-endings of the input files, which also means that you shouldn't use &kdiff3; with binary files.
</para>
</sect1>

<sect1 id="find"><title>Finding Strings</title>
<para>
   You can search for a string in any text-window of &kdiff3;. The <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find...</guimenuitem></menuchoice> menu item (<keycombo>&Ctrl;<keycap>F</keycap></keycombo>) opens a dialog that lets you specify the string to search for. You can also select the windows which should be searched. Searching will always start at the top. Use the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find Next...</guimenuitem></menuchoice> menu item (<keycap>F3</keycap>) to proceed to the next occurrence. If you select to search several windows then the first window will be searched from top to bottom before the search starts in the next window at the top again, &etc;
</para>
</sect1>

<sect1 id="printing"><title>Printing</title>
<para>
   &kdiff3; supports printing for textfile differences. The <menuchoice><guimenu>File</guimenu><guimenuitem>Print...</guimenuitem></menuchoice> menu item (<keycombo>&Ctrl;<keycap>P</keycap></keycombo>) opens a dialog that allows you to select the printer and to adjust other options.
</para><para>
   There are several possibilities to adjust the range. Due to different printing
   dialogs on different operating systems, the method to achieve certain range selections varies.
</para>
<variablelist>
   <varlistentry><term>All:</term><listitem><para>Print everything.</para></listitem></varlistentry>
   <varlistentry><term>Current:</term><listitem><para>Print a page starting at the first visible line in the window.
       (On systems without this option this can be achieved by specifying page number 10000 for printing.)</para></listitem></varlistentry>
   <varlistentry><term>Selection:</term><listitem><para>
       Before choosing to print select text with the mouse (like for copy and paste)
       in one of the diff input windows to define the start and end line. If no text
       in one of the diff input windows was selected, then this won't be an available
       choice. (On systems without this option this can be achived by specifying page
       number 9999 for printing.)</para></listitem></varlistentry>
   <varlistentry><term>Range:</term><listitem><para>Specify the first and last page.
       </para></listitem></varlistentry>
</variablelist>
<para>
   Other important options for printing will be taken from the normal options:
</para><itemizedlist>
   <listitem><para>Font, font size</para></listitem>
   <listitem><para>Show line numbers</para></listitem>
   <listitem><para>Word wrap</para></listitem>
   <listitem><para>Colors</para></listitem>
   <listitem><para>&etc;</para></listitem>
</itemizedlist>
<para>
   Landscape formatting is also recommended for printing.
</para>
</sect1>

<sect1 id="options"><title>Options</title>
<para>
   Options and the recent-file-list will be saved when you exit the program,
   and reloaded when you start it. (<menuchoice><guimenu>Settings</guimenu>
   <guimenuitem>Configure &kdiff3;...</guimenuitem></menuchoice> menu item).
</para>
<sect2><title>Font</title>
<para>
   Select a fixed width font. (On some systems this dialog will also
   present variable width fonts, but you should not use them.)
</para>
</sect2>

<sect2><title>Colors</title>
<variablelist>
  <varlistentry><term><guilabel>Editor and Diff Views:</guilabel></term><listitem>
  <variablelist>
    <varlistentry><term><guilabel>Foreground color:</guilabel></term><listitem><para> Usually black. </para></listitem></varlistentry>
    <varlistentry><term><guilabel>Background color:</guilabel></term><listitem><para> Usually white. </para></listitem></varlistentry>
    <varlistentry><term><guilabel>Diff background color:</guilabel></term><listitem><para> Usually light gray. </para></listitem></varlistentry>
    <varlistentry><term><guilabel>Color A:</guilabel></term><listitem><para> Usually dark blue. </para></listitem></varlistentry>
    <varlistentry><term><guilabel>Color B:</guilabel></term><listitem><para> Usually dark green. </para></listitem></varlistentry>
    <varlistentry><term><guilabel>Color C:</guilabel></term><listitem><para> Usually dark magenta. </para></listitem></varlistentry>
    <varlistentry><term><guilabel>Conflict color:</guilabel></term><listitem><para> Usually red.</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Current range background color:</guilabel></term><listitem><para> Usually light yellow.</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Current range diff background color:</guilabel></term><listitem><para> Usually dark yellow.</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Color for manually aligned difference ranges:</guilabel></term><listitem><para> Usually orange.</para></listitem></varlistentry>
  </variablelist></listitem></varlistentry>
  <varlistentry><term><guilabel>Folder Comparison View:</guilabel></term><listitem>
  <variablelist>
    <varlistentry><term><guilabel>Newest file color:</guilabel></term><listitem><para> Usually green.</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Oldest file color:</guilabel></term><listitem><para> Usually red.</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Middle age file color:</guilabel></term><listitem><para> Usually strong yellow.</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Color for missing files:</guilabel></term><listitem><para> Usually black.</para></listitem></varlistentry>
  </variablelist></listitem></varlistentry>
</variablelist>
<para>
   Changing the colors for folder comparison will be effective only when starting the next folder comparison.
</para>
<para>
   On systems with only 16 or 256 colors some colors are not available in pure
   form. On such systems the <guibutton>Defaults</guibutton> button will choose a pure color.
</para>
</sect2>

<sect2><title>Editor Settings</title>
<variablelist>
   <varlistentry><term><guilabel>Tab inserts spaces</guilabel></term><listitem><para>
      If this is disabled and you press the &Tab; key, a tab-character is inserted,
      otherwise the appropriate amount of characters is inserted.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Tab size:</guilabel></term><listitem><para>
               Can be adjusted for your specific needs. Default is <literal>8</literal>.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Auto indentation</guilabel></term><listitem><para>
      When pressing &Enter; or <keycap>Return</keycap> the indentation of the previous
      line is used for the new line.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Auto copy selection</guilabel></term><listitem><para>
      Every selection is immediately copied to the clipboard when active and you needn't
      explicitly copy it.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Line end style:</guilabel></term><listitem><para>
      When saving you can select what line end style you prefer. The default setting is
      the common choice for the used operating system.</para></listitem></varlistentry>
</variablelist>
</sect2>

<sect2 id="diffoptions"><title>Diff Settings</title>
<para>
   When comparing files, &kdiff3; first it tries to match lines that are equal
   in all input files. Only during this step it might ignore white space. The
   second step compares each line. In this step white space will not be ignored.
   Also during the merge white space will not be ignored.
</para>

<variablelist>
   <varlistentry><term><guilabel>Ignore numbers (treat as white space)</guilabel></term><listitem><para> Default is off. Number characters ('0'-'9', '.', '-')
      will be ignored  in the first  part of the analysis in which the line matching is
      done. In the result the differences will be shown nevertheless, but they are treated
      as white space.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Ignore C/C++ comments (treat as white space)</guilabel></term><listitem><para> Default is off.
      Changes in comments will be treated like changes in white space.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Ignore case (treat as white space)</guilabel></term><listitem><para>  Default is off.
      Case-differences of characters (like 'A' vs. 'a') will be treated like changes in white space.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Preprocessor command:</guilabel></term><listitem><para>
      See <link linkend="preprocessors">next section</link>.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Line-matching preprocessor command:</guilabel></term><listitem><para>
      See <link linkend="preprocessors">next section</link>.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Try hard (slower)</guilabel></term><listitem><para>
      Try hard to find an even smaller delta. (Default is on.) This will probably
      be effective for complicated and big files. And slow for very big files.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Align B and C for 3 input files</guilabel></term><listitem><para>
      Try to align <guilabel>B</guilabel> and <guilabel>C</guilabel> when comparing
      or merging three input files. Not recommended for merging because merge might
      get more complicated. (Default is off.)
   </para></listitem></varlistentry>
</variablelist>
</sect2>

<sect2 id="mergeoptions"><title>Merge Settings</title>
<variablelist>
   <varlistentry><term><guilabel>Auto advance delay (ms):</guilabel></term><listitem><para>
      When in auto-advance-mode this setting specifies how long to show the result of the
      selection before jumping to the next unsolved conflict.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Show info dialogs</guilabel></term><listitem><para>
      Show a dialog with information about the number of conflicts.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>White space 2/3-file merge default:</guilabel></term><listitem><para>
      Automatically solve all white-space conflict by choosing the specified file.
      (Default is manual choice.) Useful if white space really isn't important in many files.
      If you need this only occasionally better use <guilabel>Choose A/B/C for All
      Unsolved Whitespace Conflicts</guilabel> in the <guimenu>Merge</guimenu> menu. Note that
      if you enable either <guilabel>Ignore numbers (treat as white space)</guilabel> or
      <guilabel>Ignore C/C++ comments (treat as white space)</guilabel> then this auto-choice
      also applies for conflicts in numbers or comments.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Auto merge regular expression:</guilabel></term><listitem><para>
      Regular expression for lines where &kdiff3; should automatically choose one source. See also <link linkend="vcskeywordsmergesupport">Automatic Merge...</link>.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Run regular expression auto merge on merge start</guilabel></term><listitem><para>
      If activated &kdiff3; runs the automatic merge using the <guilabel>Auto merge regular expression:</guilabel> option when a merge is started.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>History entry start regular expression:</guilabel></term><listitem><para>
      Regular expression for the start of the merge history entry.
      Usually this line contains the "<literal>&#36;Log&#36;</literal>" keyword.
      Default value: "<literal>.*\&#36;Log.*\&#36;.*</literal>"
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>History entry start regular expression:</guilabel></term><listitem><para>
      A merge history entry consists of several lines.
      Specify the regular expression to detect the first line (without the leading comment).
      Use parentheses to group the keys you want to use for sorting.
      If left empty, then &kdiff3; assumes that empty lines separate history entries.
      See also <link linkend="vcskeywordsmergesupport">Automatic Merge...</link>.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>History merge sorting</guilabel></term><listitem><para>
      Enable version control history sorting.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>History entry start sort key order:</guilabel></term><listitem><para>
      Each pair of parentheses used in the regular expression for the history start entry
      groups a key that can be used for sorting.
      Specify the list of keys (that are numbered in order of occurrence
      starting with <literal>1</literal>) using ',' as separator (&eg; "<literal>4,5,6,1,2,3,7</literal>").
      If left empty, then no sorting will be done.
      See also <link linkend="vcskeywordsmergesupport">Automatic Merge...</link>.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Merge version control history on merge start</guilabel></term><listitem><para>
      If activated &kdiff3; runs the automatic history merging using aforementioned options when a merge is started.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Max number of history entries:</guilabel></term><listitem><para>
      &kdiff3; truncates the history list after the specified number of entries. Use <literal>-1</literal> to avoid truncation. (Default is <literal>-1</literal>).
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Test your regular expressions</guilabel></term><listitem><para>
      This button shows a dialog that allows you to improve and test the regular expressions above.
      Just copy the respective data from your files into the example lines. The <guilabel>Match result:</guilabel> option will immediately show whether the match succeeds or not.
      The <guilabel>Sort key result:</guilabel> will display the key used for history merge sorting.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Irrelevant merge command:</guilabel></term><listitem><para>
      Specify a command of your own that should be called when &kdiff3; detects
      that for a three file merge the file from <guilabel>B</guilabel> doesn't contribute any
      relevant data that isn't already contained in the file from <guilabel>C</guilabel>.
      The command is called with the three filenames as parameters.
      Data matched by the <guilabel>Auto merge regular expression</guilabel> or in the
      history isn't considered relevant.
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Auto save and quit on merge without conflicts</guilabel></term><listitem><para>
      If &kdiff3; was started for a file-merge from the command line and all conflicts are
      solvable without user interaction then automatically save and quit.
      (Similar to command line option <option>--auto</option>.)
   </para></listitem></varlistentry>
</variablelist>

</sect2>

<sect2><title>Folder Merge</title>
<para>
   These options are concerned with scanning the folder and handling the
   merge: See the <link linkend="dirmergeoptions">Folder Comparison/Merge
   Docs</link> for details.
</para><para>
Yet there is one option here that is also relevant for saving single files:
</para>
<variablelist>
   <varlistentry><term><guilabel>Backup files (.orig)</guilabel></term><listitem><para> When a file is saved and an older version already exists, then the original version will be renamed with an <literal role="extension">.orig</literal> extension. If an old backup file with <literal role="extension">.orig</literal> extension already exists then this will be deleted without backup.
   </para></listitem></varlistentry>
</variablelist>
</sect2>

<sect2><title>Regional and Language Options</title>
  <variablelist>
    <varlistentry><term><guilabel>Use the same encoding for everything</guilabel></term><listitem><para>The following encoding options can be adjusted separately for each item or if this option is true, all values will take the first value.
	</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Note: Local Encoding is "..."</guilabel></term><listitem><para>Above the codec-selectors appears this note that tells you what the local encoding is. (This is not adjustable but for your information just in case you don't know your local encoding, but need to select it.)
	</para></listitem></varlistentry>
    <varlistentry><term><guilabel>Auto Detect Unicode</guilabel></term><listitem><para> This option attempts to use the BOM or meta data from XML/HTML documents to detect Unicode encoding. Failing that it will check if a short sample from the beginning of the file can be interpreted as UTF-8. If this check passes UTF-8 will be used. Otherwise it will fall back to the user selected codec. Only UTF-8 is supported with no BOM or metadata present.
	</para></listitem></varlistentry>
    <varlistentry><term><guilabel>File Encoding for A/B/C:</guilabel></term><listitem><para> Adjust the file encoding for input files. This has an effect on how the special characters are interpreted. Since you can adjust each codec separately you can even compare and merge files that were saved using different codecs.
	</para></listitem></varlistentry>
    <varlistentry><term><guilabel>File Encoding for Merge Output and Saving:</guilabel></term><listitem><para> When you have edited a file, then you can adjust which encoding will be used when saving to disk.
	</para></listitem></varlistentry>
    <varlistentry><term><guilabel>File Encoding for Preprocessor Files:</guilabel></term><listitem><para>When you define preprocessors then they might not be able to operate on your codec. (&eg;: Your files are 16 bit unicode and your preprocessor can only take 8 bit &ASCII;.) With this option you can define the encoding of preprocessor output.
	</para></listitem></varlistentry>
	<varlistentry><term><guilabel>Right To Left Language:</guilabel></term><listitem><para>Some languages are written right to left. When this option is enabled, &kdiff3; draws the text from right to left in the diff input windows and in the merge output window. Note that if you start &kdiff3; with the command line option <option>--reverse</option> then all layouting will be done right to left too. (This is a feature provided by &Qt;.)
    </para><note><para>
    This documentation was written assuming that this option or reverse layout are disabled. So some references to "left" or "right" must be replaced by their respective counterpart if you use these options.
    </para></note></listitem></varlistentry>

  </variablelist>
</sect2>

<sect2><title>Miscellaneous</title>
<para>(These options and actions are available in menus or the buttonbar.)</para>
<variablelist>
  <varlistentry><term><emphasis>Overview options:</emphasis></term><listitem><para>
    These choices are only available when you compare three files. In normal mode all
    differences are shown in one color-coded overview-column. But sometimes you are
    especially interested in the differences between only two of these three files.
    Selecting "A vs. B", "A vs. C" or "B vs. C"-overview will show a second overview
    column with the required information next to the normal overview.
  </para></listitem></varlistentry>
  <varlistentry><term><guimenuitem>Word Wrap Diff Windows</guimenuitem></term><listitem><para>
    Wrap lines when their length would exceed the width of a window.
  </para></listitem></varlistentry>
  <varlistentry><term><guibutton>Show Window A/B/C:</guibutton></term><listitem><para> Sometimes you want to use the space on
    the screen better for long lines. Hide the windows that are not important.
    (In the Windows-menu.)</para></listitem></varlistentry>
  <varlistentry><term><guibutton>Toggle Split Orientation</guibutton></term><listitem><para>
    Switch between diff windows shown next to each other (<guilabel>A</guilabel> left of <guilabel>B</guilabel> left of <guilabel>C</guilabel>) or above each other (<guilabel>A</guilabel> above <guilabel>B</guilabel> above <guilabel>C</guilabel>). This should also help for long lines. (In the <guimenu>Window</guimenu> menu.)
  </para></listitem></varlistentry>
  <varlistentry><term><guibutton>Merge Current File</guibutton></term><listitem><para> Works if you only compare
    two files. A single click starts the merge and uses the filename of the last
    input-file as the default output filename. (When this is used to restart
    a merge, then the output filename will be preserved.)</para></listitem></varlistentry>
  <varlistentry><term><guibutton>Show White Space</guibutton></term><listitem><para> Turn this off to suppress
    any highlighting of white-space-only changes in the text or overview-columns.
    (Note that this also applies to changes in numbers or comments if the options
    <guilabel>Ignore numbers (treat as white space)</guilabel> or <guilabel>Ignore C/C++ comments
    (treat as white space)</guilabel> are active.)</para></listitem></varlistentry>
  <varlistentry><term><guibutton>Show Space &amp;&amp; Tabulator Characters</guibutton></term><listitem><para> Sometimes
    the visible spaces and tabs are disturbing. You can turn this off.</para></listitem></varlistentry>
  <varlistentry><term><guibutton>Show Line Numbers</guibutton></term><listitem><para> You can select if line numbers should be
    shown for the input files.</para></listitem></varlistentry>
</variablelist>
</sect2>

<sect2 id="shortcuts"><title>Configuring Keyboard-Shortcuts</title>
<para>
   Currently only the &frameworks; version supports user-configurable keyboard-shortcuts.
   (Menu <menuchoice><guimenu>Settings</guimenu><guimenuitem>Configure Shortcuts...</guimenuitem></menuchoice>)
</para>
</sect2>
</sect1>

<sect1 id="preprocessors"><title>Preprocessor Commands</title>
<para>
&kdiff3; supports two preprocessor options.
</para><para>
<variablelist>
   <varlistentry><term><guilabel>Preprocessor command:</guilabel></term><listitem><para>
      When any file is read, it will be piped through this external command.
      The output of this command will be visible instead of the original file.
      You can write your own preprocessor that fulfills your specific needs.
      Use this to cut away disturbing parts of the file, or to automatically
      correct the indentation &etc;
   </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Line-matching preprocessor command:</guilabel></term><listitem><para>
      When any file is read, it will be piped through this external command. If
      a preprocessor-command (see above) is also specified, then the output of the
      preprocessor is the input of the line-matching preprocessor.
      The output will only be used during the line matching phase of the analysis.
      You can write your own preprocessor that fulfills your specific needs.
      Each input line must have a corresponding output line.
   </para></listitem></varlistentry>
</variablelist>
</para>
<para>
The idea is to allow the user greater flexibility while configuring the diff-result.
But this requires an external program, and many users don't want to write one themselves.
The good news is that very often <command>sed</command> or <command>perl</command>
will do the job.
</para>
<para>Example: Simple testcase: Consider file a.txt (6 lines):
</para>
<screen>
      aa
      ba
      ca
      da
      ea
      fa
</screen>
<para>
And file b.txt (3 lines):
</para>
<screen>
      cg
      dg
      eg
</screen>
<para>
Without a preprocessor the following lines would be placed next to each other:
</para>
<screen>
      aa - cg
      ba - dg
      ca - eg
      da
      ea
      fa
</screen>
<para>
This is probably not wanted since the first letter contains the actually interesting information.
To help the matching algorithm to ignore the second letter we can use a line matching preprocessor
command, that replaces 'g' with 'a':
</para>
<screen>
   <command>sed</command> 's/g/a/'
</screen>
<para>
With this command the result of the comparison would be:
</para>
<screen>
      aa
      ba
      ca - cg
      da - dg
      ea - eg
      fa
</screen>
<para>
Internally the matching algorithm sees the files after running the line matching preprocessor,
but on the screen the file is unchanged. (The normal preprocessor would change the data also on
the screen.)
</para>

<sect2 id="sedbasics"><title><command>sed</command> Basics</title>
<para>
This section only introduces some very basic features of <command>sed</command>. For more
information see <ulink url="info:/sed">info:/sed</ulink> or
<ulink url="https://www.gnu.org/software/sed/manual/html_mono/sed.html">
https://www.gnu.org/software/sed/manual/html_mono/sed.html</ulink>.
A precompiled version for &Windows; can be found at <ulink url="http://unxutils.sourceforge.net">
http://unxutils.sourceforge.net</ulink>.
Note that the following examples assume that the <command>sed</command> command is in some
folder in the <envar>PATH</envar> environment variable. If this is not the case, you have to specify the full absolute
path for the command.
</para>
<para>
In this context only the <command>sed</command> substitute command is used:
</para>
<screen>
   <command>sed</command> 's/<replaceable>REGEXP</replaceable>/<replaceable>REPLACEMENT</replaceable>/<replaceable>FLAGS</replaceable>'
</screen>
<para>
Before you use a new command within &kdiff3;, you should first test it in a console.
Here the <command>echo</command> command is useful. Example:
</para>
<screen>
   <command>echo</command> abrakadabra | <command>sed</command> 's/a/o/'
   -> obrakadabra
</screen>
<para>
This example shows a very simple sed-command that replaces the first occurrence
of "a" with "o". If you want to replace all occurrences then you need the "g" flag:
</para>
<screen>
   <command>echo</command> abrakadabra | <command>sed</command> 's/a/o/g'
   -> obrokodobro
</screen>
<para>
The "|"-symbol is the pipe-command that transfers the output of the previous
command to the input of the following command. If you want to test with a longer file
then you can use <command>cat</command> on &UNIX; like systems or <command>type</command>
on &Windows; like systems. <command>sed</command> will do the substitution for each line.
<screen>
   <command>cat</command> <replaceable>filename</replaceable> | <command>sed</command> <replaceable>options</replaceable>
</screen>
</para>
</sect2>
<sect2 id="sedforkdiff3"><title>Examples For <command>sed</command> Use In &kdiff3;</title>
<sect3><title>Ignoring Other Types Of Comments</title>
<para>
Currently &kdiff3; understands only C/C++ comments. Using the
<guilabel>Line-matching preprocessor command:</guilabel> option you can also ignore
other types of comments, by converting them into C/C++-comments.
</para>
<para>
Example: To ignore comments starting with "<literal>#</literal>", you would like to convert them to "<literal>//</literal>". Note that you also must enable the <guilabel>Ignore C/C++ comments (treat as white space)</guilabel> option to get an effect. An appropriate <guilabel>Line-matching preprocessor command:</guilabel> would be:
</para>
<screen>
   <command>sed</command> 's/#/\/\//'
</screen>
<para>
Since for <command>sed</command> the "<literal>/</literal>" character has a special meaning, it is necessary to place the "<literal>\</literal>" character before each "<literal>/</literal>" in the replacement-string. Sometimes the "<literal>\</literal>" is required to add or remove a special meaning of certain characters. The single quotation marks (') are only important when testing on the command shell as it will otherwise attempt to process some characters.
&kdiff3; does not do this except for the escape sequences '<literal>\"</literal>' and '<literal>\\</literal>'.
</para>
</sect3>
<sect3><title>Caseinsensitive Diff</title>
<para>
Use the following <guilabel>Line-matching preprocessor command:</guilabel> to convert all input to uppercase:
</para>
<screen>
   <command>sed</command> 's/\(.*\)/\U\1/'
</screen>
<para>
Here the "<literal>.*</literal>" is a regular expression that matches any string and in this context matches all characters in the line.
The "<literal>\1</literal>" in the replacement string refers to the matched text within the first pair of "<literal>\(</literal>" and "<literal>\)</literal>".
The "<literal>\U</literal>" converts the inserted text to uppercase.
</para>
</sect3>

<sect3><title>Ignoring Version Control Keywords</title>
<para>
CVS and other version control systems use several keywords to insert automatically
generated strings (<ulink url="info:/cvs/Keyword substitution">info:/cvs/Keyword substitution</ulink>).
All of them follow the pattern "<replaceable>$KEYWORD generated text$</replaceable>". We now need a
line-matching preprocessor command that removes only the generated text:
</para>
<screen>
   <command>sed</command> 's/\$\(Revision\|Author\|Log\|Header\|Date\).*\$/\$\1\$/'
</screen>
<para>
The "<literal>\|</literal>" separates the possible keywords. You might want to modify this list
according to your needs.
The "<literal>\</literal>" before the "<literal>$</literal>" is necessary because otherwise the "<literal>$</literal>" matches the end of the line.
</para>
<para>
While experimenting with <command>sed</command> you might come to understand and even like
these regular expressions. They are useful because there are many other programs that also
support similar things.
</para>
</sect3>

<sect3><title>Ignoring Numbers</title>
<para>
Ignoring numbers actually is a built-in option. But as another example, this is how
it would look as a line-matching preprocessor command.
</para>
<screen>
   <command>sed</command> 's/[0123456789.-]//g'
</screen>
<para>
Any character within '<literal>[</literal>' and '<literal>]</literal>' is a match and will be replaced with nothing.
</para>
</sect3>

<sect3><title>Ignoring Certain Columns</title>
<para>
Sometimes a text is very strictly formatted, and contains columns that you always want to ignore, while there are
other columns you want to preserve for analysis. In the following example the first five columns (characters) are
ignored, the next ten columns are preserved, then again five columns are ignored and the rest of the line is preserved.
</para>
<screen>
   <command>sed</command> 's/.....\(..........\).....\(.*\)/\1\2/'
</screen>
<para>
Each dot '<literal>.</literal>' matches any single character. The "<literal>\1</literal>" and "<literal>\2</literal>" in the replacement string refer to the matched text within the first
and second pair of "<literal>\(</literal>" and "<literal>\)</literal>" denoting the text to be preserved.
</para>
</sect3>

<sect3><title>Combining Several Substitutions</title>
<para>
Sometimes you want to apply several substitutions at once. You can then use the
semicolon '<literal>;</literal>' to separate these from each other. Example:
</para>
<screen>
   <command>echo</command> abrakadabra | <command>sed</command> 's/a/o/g;s/\(.*\)/\U\1/'
   -> OBROKODOBRO
</screen>
</sect3>

<sect3><title>Using <command>perl</command> instead of <command>sed</command></title>
<para>
Instead of <command>sed</command> you might want to use something else like
<command>perl</command>.
</para>
<screen>
   <command>perl</command> -p -e 's/<replaceable>REGEXP</replaceable>/<replaceable>REPLACEMENT</replaceable>/<replaceable>FLAGS</replaceable>'
</screen>
<para>
But some details are different in <command>perl</command>. Note that where
<command>sed</command> needed "<literal>\(</literal>" and "<literal>\)</literal>" <command>perl</command>
requires the simpler "<literal>(</literal>" and "<literal>)</literal>" without preceding '<literal>\</literal>'. Example:
</para>
<screen>
   <command>sed</command> 's/\(.*\)/\U\1/'
   <command>perl</command> -p -e 's/(.*)/\U\1/'
</screen>
</sect3>
</sect2>

<sect2><title>Order Of Preprocessor Execution</title>
<para>
The data is piped through all internal and external preprocessors in the
following order:
</para>
<itemizedlist>
<listitem><para>Normal preprocessor,</para></listitem>
<listitem><para>Line-matching preprocessor,</para></listitem>
<listitem><para>Ignore case (treat as white space) (conversion to uppercase),</para></listitem>
<listitem><para>Detection of C/C++ comments,</para></listitem>
<listitem><para>Ignore numbers (treat as white space),</para></listitem>
<listitem><para>Ignore white space</para></listitem>
</itemizedlist>
<para>
The data after the normal preprocessor will be preserved for display and merging. The
other operations only modify the data that the line-matching-diff-algorithm sees.
</para><para>
In the rare cases where you use a normal preprocessor note that
the line-matching-preprocessor sees the output of the normal preprocessor as input.
</para>
</sect2>

<sect2><title>Warning</title>
<para>
The preprocessor-commands are often very useful, but as with any option that modifies
your texts or hides away certain differences automatically, you might accidentally overlook
certain differences and in the worst case destroy important data.
</para><para>
For this reason during a merge if a normal preprocessor-command is being used &kdiff3; will tell you so and ask you if it should be disabled or not. But it won't warn you if a <guilabel>Line-matching preprocessor command:</guilabel> option is active. The merge will not complete until all conflicts are solved. If you disabled <menuchoice><guimenu>Diffview</guimenu><guimenuitem>Show White Space</guimenuitem></menuchoice> menu item then the differences that were removed with the <guilabel>Line-matching preprocessor command:</guilabel> option will also be invisible. If the <guibutton>Save</guibutton> button remains disabled during a merge (because of remaining conflicts), make sure to enable <menuchoice><guimenu>Diffview</guimenu><guimenuitem>Show White Space</guimenuitem></menuchoice> menu item. If you don't want to merge these less important differences manually
you can select <menuchoice><guimenu>Merge</guimenu><guimenuitem>Choose [A|B|C] for All Unsolved Whitespace Conflicts</guimenuitem></menuchoice> menu item.
</para>
</sect2>
</sect1>
</chapter>


<chapter id="dirmerge"><title>Folder Comparison and Merge with &kdiff3;</title>
<sect1 id="dirmergeintro"><title>Introduction into Folder Comparison and Merge</title>
<para>
   Often programmers must modify many files in a folder to achieve their
   purpose. For this &kdiff3; also lets you compare and merge complete folders
   recursively!
</para><para>
   Even though comparing and merging folders seems to be quite obvious,
   there are several details that you should know about. Most important is of
   course the fact that now many files might be affected by each operation.
   If you don't have backups of your original data, then it can be very hard
   or even impossible to return to the original state. So before starting a merge,
   make sure that your data is safe, and going back is possible. If you make
   an archive or use some version control system is your decision, but even
   experienced programmers and integrators need the old sources now and then.
   And note that even though I (the author of &kdiff3;) try to do my best, I can't
   guarantee that there are no bugs. According to the &GNU; GPL there is NO WARRANTY
   whatsoever for this program. So be humble and always keep in mind:
</para>
<blockquote><para>
   <emphasis>To err is human, but to really mess things up you need a computer.</emphasis>
</para></blockquote>
<para>
So this is what this program can do for you: &kdiff3; ...
</para>
<itemizedlist>
     <listitem><para>... reads and compares two or three folders recursively,</para></listitem>
     <listitem><para>... takes special care of symbolic links,</para></listitem>
     <listitem><para>... lets you browse files on mouse double click,</para></listitem>
     <listitem><para>... for each item proposes a merge operation, which you can change
                         before starting the folder merge,</para></listitem>
     <listitem><para>... lets you simulate the merge and lists the actions that would
                         take  place, without actually doing them,</para></listitem>
     <listitem><para>... lets you really do the merge, and lets you interact whenever
                         manual interaction is needed,</para></listitem>
     <listitem><para>... lets you run the selected operation for all items (<keycap>F7</keycap> key) or the selected item (<keycap>F6</keycap> key),</para></listitem>
     <listitem><para>... lets you continue the merge after manual interaction with <keycap>F7</keycap> key,</para></listitem>
     <listitem><para>... optionally creates backups, with the <literal role="extension">.orig</literal> extension,</para></listitem>
     <listitem><para>...</para></listitem>
</itemizedlist>
</sect1>

<sect1 id="startingdirmerge"><title>Starting Folder Comparison Or Merge</title>
<para>
   This is very similar to the single file merge and comparison. You just
   have  to specify folders on the command line or in the file-open
   dialog.
</para>
<sect2><title>Compare/Merge two folders: </title>
<screen>
   <command>kdiff3</command> <replaceable>folder1 folder2</replaceable>
   <command>kdiff3</command> <replaceable>folder1 folder2</replaceable> -o <replaceable>destdir</replaceable>
</screen>
<para>
   If no destination folder is specified, then &kdiff3; will use <replaceable>folder2</replaceable>.
</para>
</sect2>

<sect2><title>Compare/Merge three folders: </title>
<screen>
   <command>kdiff3</command> <replaceable>folder1 folder2 folder3</replaceable>
   <command>kdiff3</command> <replaceable>folder1 folder2 folder3</replaceable> -o <replaceable>destdir</replaceable>
</screen>
<para>
   When three folders are merged then <replaceable>folder1</replaceable>
   is used as the base for the merge.
   If no destination folder is specified, then &kdiff3; will use <replaceable>folder3</replaceable>
   as the  destination folder for the merge.
</para>

<para>
   Note that only the comparison starts automatically, not the merge. For this you first must
   select a menu entry or the <keycap>F7</keycap> key. (More details later.)
</para>
</sect2>
</sect1>

<sect1 id="dirmergevisible"><title>Folder Merge Visible Information</title>
<para>
   While reading the folders a message-box appears that informs you of
   the progress. If you abort the folder scan, then only files that have
   been  compared until then will be listed.
</para><para>
   When the folder scan is complete then &kdiff3; will show a listbox with
   the results left, ...
</para>
<screenshot><mediaobject>
<imageobject><imagedata fileref="dirbrowser.png" format="PNG"/></imageobject> <!--alt="Image of the folder browser."-->
</mediaobject></screenshot>
<para>
   ... and details about the currently selected item on the right:
</para>
<screenshot><mediaobject>
<imageobject><imagedata fileref="iteminfo.png" format="PNG"/></imageobject>
   <!--alt="Image with information about the selected item."-->
</mediaobject></screenshot>

<sect2 id="name"><title>The Name Column</title>
<para>
   Each file and folder that was found during the scan is shown here in
   a tree. You can select an item by clicking it with the mouse once.
</para><para>
   The folders are collapsed by default. You can expand and collapse
   them by clicking on the "+"/"-" or by double-clicking the item or
   by using the &Left;/&Right; cursor keys. The <guimenu>Folder</guimenu> menu also contains two
   actions <guimenuitem>Fold All Subfolders</guimenuitem> and <guimenuitem>Unfold All Subfolders</guimenuitem> with which you can
   collapse or expand all folders at once.
</para><para>
   If you double-click a file item then the file comparison starts and the
   file-diff-window will appear.
</para>
<para>
   The image in the name column reflects the file type in the first
   folder  (<guilabel>A</guilabel>). It can be one of these:
</para>
<itemizedlist>
     <listitem><para>Normal file</para></listitem>
     <listitem><para>Normal folder (folder image)</para></listitem>
     <listitem><para>Link to a file (file image with a link arrow)</para></listitem>
     <listitem><para>Link to a folder (folder image with a link arrow)</para></listitem>
</itemizedlist>
<para>
   If the file type is different in the other folders, then this is visible
   in the columns <guilabel>A</guilabel>/<guilabel>B</guilabel>/<guilabel>C</guilabel>
   and in the window that shows the details about the selected item. Note that
   for such a case no merge operation can be selected automatically. When starting
   the merge, then the user will be informed of problems of that kind.
</para>
</sect2>

<sect2 id="coloring"><title>The Columns A/B/C and the Coloring Scheme</title>
<para>
   As can be seen in the image above the colors red, green, yellow and black
   are used in the columns <guilabel>A</guilabel>/<guilabel>B</guilabel>/<guilabel>C</guilabel>.
</para>
<itemizedlist>
     <listitem><para>Black: This item doesn't exist in this folder.</para></listitem>
     <listitem><para>Green: Newest item.</para></listitem>
     <listitem><para>Yellow: Older than green, newer than red.</para></listitem>
     <listitem><para>Red: Oldest item.</para></listitem>
</itemizedlist>
<para>
   But for items that were identical in the comparison their color also is
   identical even if the age is not.
</para><para>
   Folders are considered equal if all items they contain are identical.
   Then they also will have the same color. But the age of a folder is not
   considered for its color.
</para><para>
   The idea for this coloring scheme I came upon in
   <ulink url="https://www.samba.org/ftp/paulus/"><command>dirdiff</command> command</ulink>. The colors
   resemble the colors of a leaf that is green when new, turns yellow later and red
   when old.
</para>

</sect2><sect2 id="operation"><title>The Operation Column</title>
<para>
   After comparing the folders &kdiff3; also evaluates a proposal for a
   merge  operation. This is shown in the <guilabel>Operation</guilabel> column. You can modify
   the operation  by clicking on the operation you want to change. A small menu
   will popup and allows you to select an operation for that item. (You can also
   select the most needed operations via keyboard.
   <keycombo>&Ctrl;<keycap>1</keycap></keycombo>/<keycap>2</keycap>/<keycap>3</keycap>/<keycap>4</keycap>/&Del;
   will select <guilabel>A</guilabel>/<guilabel>B</guilabel>/<guilabel>C</guilabel>/<guilabel>Merge</guilabel>/
   <guilabel>Delete</guilabel> respectively if available.) This operation will be executed during the merge.
   It depends on the item and on the merge-mode you are in, what operations are available. The merge-mode is one of
</para>
<itemizedlist>
     <listitem><para>Three-folder merge (<guilabel>A</guilabel> is treated as older base of both).</para></listitem>
     <listitem><para>Two-folder merge.</para></listitem>
     <listitem><para>Two-folder sync-mode (activate via <guilabel>Synchronize folders</guilabel> option).</para></listitem>
</itemizedlist>
<para>
   In three-folder merge the operation proposal will be: If for an item ...
</para>
<itemizedlist>
     <listitem><para>
             ... all three folders are equal: Copy from <guilabel>C</guilabel>
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> and <guilabel>C</guilabel> are equal but <guilabel>B</guilabel> is not: Copy from <guilabel>B</guilabel> (or if <guilabel>B</guilabel> does not exist, delete the destination if exists)
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> and <guilabel>B</guilabel> are equal but <guilabel>C</guilabel> is not: Copy from <guilabel>C</guilabel> (or if <guilabel>C</guilabel> does not exist, delete the destination if exists)
     </para></listitem>
     <listitem><para>
             ... <guilabel>B</guilabel> and <guilabel>C</guilabel> are equal but <guilabel>A</guilabel> is not: Copy from <guilabel>C</guilabel> (or if <guilabel>C</guilabel> does not exist, delete the destination if exists)
     </para></listitem>
     <listitem><para>
             ... only <guilabel>A</guilabel> exists: Delete the destination (if exists)
     </para></listitem>
     <listitem><para>
             ... only <guilabel>B</guilabel> exists: Copy from <guilabel>B</guilabel>
     </para></listitem>
     <listitem><para>
             ... only <guilabel>C</guilabel> exists: Copy from <guilabel>C</guilabel>
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel>, <guilabel>B</guilabel> and <guilabel>C</guilabel> are not equal: Merge
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel>, <guilabel>B</guilabel> and <guilabel>C</guilabel> don't have the same file type (&eg; <guilabel>A</guilabel> is a folder, <guilabel>B</guilabel> is a file): "Error: Conflicting File Types". While such items exist the folder merge cannot start.
     </para></listitem>
</itemizedlist>
<para>
   In two-folder merge the operation proposal will be: If for an item ...
</para>
<itemizedlist>
     <listitem><para>
             ... both folders are equal: Copy from <guilabel>B</guilabel>
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> exists, but not <guilabel>B</guilabel>: Copy from <guilabel>A</guilabel>
     </para></listitem>
     <listitem><para>
             ... <guilabel>B</guilabel> exists, but not <guilabel>A</guilabel>: Copy from <guilabel>B</guilabel>
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> and <guilabel>B</guilabel> exist but are not equal: Merge
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> and <guilabel>B</guilabel> don't have the same file type (&eg; <guilabel>A</guilabel> is a folder, <guilabel>B</guilabel> is a file): "Error: Conflicting File Types". While such items exist the folder merge cannot start.
     </para></listitem>
</itemizedlist>
<para>
   Sync-mode is active if only two folders and no explicit destination
   were specified and if the <guilabel>Synchronize folders</guilabel> option is active. &kdiff3;
   then selects a default operation so that both folders are the same afterwards.
   If for an item ...
</para>
<itemizedlist>
     <listitem><para>
             ... both folders are equal: Nothing will be done.
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> exists, but not <guilabel>B</guilabel>: Copy <guilabel>A</guilabel> to <guilabel>B</guilabel>
     </para></listitem>
     <listitem><para>
             ... <guilabel>B</guilabel> exists, but not <guilabel>A</guilabel>: Copy <guilabel>B</guilabel> to <guilabel>A</guilabel>
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> and <guilabel>B</guilabel> exist, but are not equal: Merge and store the result in both folders. (For the user the visible save-filename is <guilabel>B</guilabel>, but then &kdiff3; copies <guilabel>B</guilabel> also to <guilabel>A</guilabel>.)
     </para></listitem>
     <listitem><para>
             ... <guilabel>A</guilabel> and <guilabel>B</guilabel> don't have the same file type (&eg; <guilabel>A</guilabel> is a folder, <guilabel>B</guilabel> is a file): "Error: Conflicting File Types". While such items exist the folder merge cannot start.
     </para></listitem>
</itemizedlist>
<para>
   When two folders are merged and the <guilabel>Copy newer instead of merging (unsafe)</guilabel> option is selected, then &kdiff3; looks at the dates and proposes to choose the newer file. If the files are not equal but have equal dates, then the operation will contain "Error: Dates are equal but files are not." While such items exist the folder merge cannot start.
</para>
</sect2>

<sect2 id="status"><title>The Status Column</title>
<para>
   During the merge one file after the other will be processed. The status
   column will show <guilabel>Done</guilabel> for items where the merge operation has succeeded,
   and other texts if something unexpected happened. When a merge is complete,
   then you should make a last check to see if the status for all items is
   agreeable.
</para>
</sect2>

<sect2 id="statisticscolulmns"><title>Statistics Columns</title>
<para>
   When the file comparison mode <guilabel>Full Analysis</guilabel> is enabled in the options, then
   &kdiff3; will show extra columns containing the numbers of Unsolved, Solved, Nonwhite and Whitespace
   conflicts. (The <guilabel>Solved</guilabel> column will only show when comparing or merging three folders.)
</para>
</sect2>

<sect2 id="selectingvisiblefiles"><title>Selecting Listed Files</title>
<para>
   Several options influence which files are listed here. Some are accessible in the
   <link linkend="dirmergeoptions">settings dialog</link>. The <guilabel>Folder</guilabel> menu contains the entries:
</para><para><itemizedlist>
     <listitem><para>
        <guilabel>Show Identical Files</guilabel>: Files that have been detected equal in all input folders.
     </para></listitem>
     <listitem><para>
        <guilabel>Show Different Files</guilabel>: Files that exist in two or more folders but are not equal.
     </para></listitem>
     <listitem><para>
        <guilabel>Show Files only in A</guilabel>: Files that exist only in <guilabel>A</guilabel>, but not in <guilabel>B</guilabel> or <guilabel>C</guilabel>.
     </para></listitem>
     <listitem><para>
        <guilabel>Show Files only in B</guilabel>: Files that exist only in <guilabel>B</guilabel>, but not in <guilabel>A</guilabel> or <guilabel>C</guilabel>.
     </para></listitem>
     <listitem><para>
        <guilabel>Show Files only in C</guilabel>: Files that exist only in <guilabel>C</guilabel>, but not in <guilabel>A</guilabel> or <guilabel>B</guilabel>.
     </para></listitem>
</itemizedlist></para>
<para>
   Activate only the <guilabel>Show</guilabel> options for the items you want listed. If for example you only want to list all items that exist either in <guilabel>A</guilabel> or in <guilabel>B</guilabel> but not in both, you'll have to activate <guilabel>Show Files only in A</guilabel> and <guilabel>Show Files only in B</guilabel> and deactivate all others (<guilabel>Show Identical Files</guilabel>, <guilabel>Show Different Files</guilabel>, <guilabel>Show Files only in C</guilabel>). The list will be updated immediately to reflect the change.
</para><para>
   These options also apply for folders with one exception: Disabling <guilabel>
   Show Different Files</guilabel> will not hide any complete folders. This will
   work only for files within.
</para><para>
   Note that of these only the <guilabel>Show Identical Files</guilabel> option is persistant. The others are enabled when starting &kdiff3;.
</para>
</sect2>

</sect1>


<sect1 id="dothemerge"><title>Doing A Folder Merge</title>
<para>
   You can either merge the currently selected item (file or folder), or all items.
   When you have made all your operation choices (in all subfolders too)
   then you can start the merge.
</para><para>
   Be aware that if you didn't specify a destination folder explicitly, then the destination will be <guilabel>C</guilabel> in three-folder mode, <guilabel>B</guilabel> in two-folder merge mode, and in sync-mode it will be <guilabel>A</guilabel> or/and <guilabel>B</guilabel>.
</para><para>
   If you have specified a destination folder also check that all items
   that should be in the output, are in the tree. There are some options that
   cause certain items to be omitted from the folder comparison and merge.
   Check these options to avoid unpleasant surprises:
</para>
<itemizedlist>
     <listitem><para><guilabel>Recursive Folders</guilabel>: If this is off, then items in subfolders will not be found.</para></listitem>
     <listitem><para><guilabel>Pattern</guilabel>/<guilabel>Anti-Pattern</guilabel>: Include/exclude items that match</para></listitem>
     <listitem><para><guilabel>Exclude Hidden Files</guilabel></para></listitem>
     <listitem><para><link linkend="selectingvisiblefiles">Show options</link> (<guilabel>Show Identical/Different Files</guilabel>, <guilabel>Files only in A/B/C</guilabel>)</para></listitem>
</itemizedlist>
<para>
   If you change the settings in order to list more files, you must do a rescan
   via menu <menuchoice><guimenu>Folder</guimenu><guimenuitem>Rescan</guimenuitem>
   </menuchoice> yourself. (The reason for this is that for faster comparison-speed
   &kdiff3; omits the comparison for files suppressed by these criteria.) If you
   changed your file and folder patterns to exclude files, then the file-list will
   immediately be updated on closing the options-dialog.
</para><para>
   Note that when you write to a completely new folder then you usually also want to copy the identical files.
   In that case enable the <guilabel>Show Identical Files</guilabel> option. If your destination folder is one of the inputs,
   then this isn't necessary because the file is already there.
</para><para>
   If you are satisfied so far, the rest is easy.
</para><para>
   To merge all items: Select <guimenuitem>Start/Continue Folder Merge</guimenuitem>
   in the <guimenu>Folder</guimenu> menu or press <keycap>F7</keycap> (which is the
   default shortcut). To merge only the current item: Select <guilabel>Run Operation
   for Current Item</guilabel> or press <keycap>F6</keycap>.
</para><para>
   If due to conflicting filetypes still some items with invalid operations
   exist, then a messagebox will appear and these items will be pointed out,
   so you can select a valid operation for the item.
</para><para>
   If you merge all items a dialog will appear giving you the options
   <guilabel>Do it</guilabel>, <guilabel>Simulate it</guilabel> and
   <guilabel>Cancel</guilabel>.
</para>
<itemizedlist>
     <listitem><para>Select <guilabel>Simulate it</guilabel> if you want to see what would be done without
     actually doing it. A verbose list of all operations will be shown.</para></listitem>
     <listitem><para>Otherwise select <guilabel>Do it</guilabel> to really start merging.</para></listitem>
</itemizedlist>
<para>
   Then &kdiff3; will run the specified operation for all items. If manual
   interaction is required (single file merge), then a merge window will open
   (<link linkend="dirmergebigscreenshot">see the big screenshot</link>).
</para><para>
   When you have finished with manually merging a file, again select <guimenuitem>Start/
   Continue Folder Merge</guimenuitem> or the <keycap>F7</keycap> key. If you haven't
   saved it yet, a dialog will ask you to do so. Then &kdiff3; will continue with the
   next item.
</para><para>
   When &kdiff3; encounters an error, it will tell you so and will show the
   verbose-status-information. At the bottom of this list, there will be some
   error messages which should help you to understand the cause of the problem.
   When you continue merging (<keycap>F7</keycap> key) &kdiff3; will give you the choice to retry
   or skip the item that caused the problem. This means that before continuing
   you can choose another operation or solve the problem by other means.
</para><para>
   When the merge is complete, then &kdiff3; will inform you via a message
   box.
</para><para>
   If some items were merged individually before running the directorymerge then
   &kdiff3; remembers this (while this
   merge-session goes on), and doesn't merge them again when later the merge for
   all items is run. Even when the merge was skipped or nothing was saved these
   items count as completed. Only when you change the merge operation the
   <guilabel>Done</guilabel> status of the item will be removed and it can be merged again.
</para>
</sect1>

<sect1 id="dirmergeoptions"><title>Options for Comparing and Merging Folders</title>
<para>
   The &kdiff3; preferences (menu <menuchoice><guimenu>Settings</guimenu>
   <guimenuitem>Configure &kdiff3;...</guimenuitem></menuchoice>) has
   a section called "Folder Merge" with these options:
</para>

<variablelist>
   <varlistentry><term><guilabel>Recursive folders</guilabel></term><listitem><para> Select whether to search folders
         recursively.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>File pattern(s):</guilabel></term><listitem><para> Only files that match any pattern here will
         be put in the tree. More than one pattern may be specified here by using
         the semicolon ";" as separator. Valid wildcards: '*' and '?'. (&eg; "<literal>*.cpp;*.h</literal>").
         Default is "*". This pattern is not used on folders.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>File-anti-pattern(s):</guilabel></term><listitem><para> Files that match this pattern
         will be excluded from the tree. More than one pattern may be specified here
         via using the semicolon ";" as separator. Valid wildcards: '*' and '?'. Default
         is "<literal>*.orig;*.o;*.obj</literal>".</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Folder-anti-pattern(s):</guilabel></term><listitem><para> Folders that match this pattern
         will be excluded from the tree. More than one pattern may be specified here
         via using the semicolon ";" as separator. Valid wildcards: '*' and '?'. Default
         is "<literal>CVS;deps;.svn</literal>".</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Use Ignore File</guilabel></term><listitem><para>
         Ignore files and folders that would also be ignored by the your source control.
         Many automatically generated files are ignored using ignore lists.
         The big advantage is that this can be folder-specific via a local ignore file.
         (See version control docs for more detail.)
         </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Find hidden files and folders</guilabel></term><listitem><para> On some file systems files
         have an "Hidden"-attribute. On other systems a filename starting with a dot
         "." causes it to be hidden. This option allows you to decide whether to
         include  these files in the tree or not. Default is on.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Follow file links</guilabel></term><listitem><para> For links to files: When disabled, then
         the symbolic links are compared. When enabled, then the files behind the
         links are compared. Default is off.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Follow folder links</guilabel></term><listitem><para> For links to folders: When disabled,
         then the symbolic links will be compared. When enabled then the link will
         be treated like a folder and it will be scanned recursively. (Note that
         the program doesn't check if the link is "recursive". So for example a folder
         that contains a link to the folder would cause an infinite loop, and after
         some time when the stack overflows or all memory is used up, crash the program.)
         Default is off.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Case sensitive filename comparison</guilabel></term><listitem><para>
         Default is false on &Windows;, true for other operating systems.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>File Comparison Mode:</guilabel></term><listitem><para>
<variablelist>
   <varlistentry><term><guilabel>Binary comparison</guilabel></term><listitem><para>
         This is the default file comparison mode.
         </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Full analysis</guilabel></term><listitem><para>
         Do a full analysis of each file and show the statistics information columns.
         (Number of <guilabel>Solved</guilabel>, <guilabel>Unsolved</guilabel>,
         <guilabel>Nonwhite</guilabel> and <guilabel>White</guilabel> conflicts.)
         The full analysis is slower than a simple binary analysis, and much
         slower when used on files that don't contain text.
         (Specify the appropriate file-antipatterns.)
         </para></listitem></varlistentry>
   <varlistentry><term><guilabel>Trust the size and modification date (unsafe)</guilabel></term><listitem><para>
         If you compare big folders over a slow network, it might be faster to
         compare the modification dates and file length alone. But this speed improvement
         comes with the price of a little uncertainty. Use this option with care.
         Default is off.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Trust the size (unsafe)</guilabel></term><listitem><para>
         Similar to trusting the modification date. No real comparison happens. Two
         files are considered equal if their file-sizes are equal. This is useful
         when the file-copy operation didn't preserve the modification date.
         Use this option with care. Default is off.</para></listitem></varlistentry>
</variablelist></para></listitem></varlistentry>

   <varlistentry><term><guilabel>Synchronize folders</guilabel></term><listitem><para>
         Activates sync-mode when two folders are compared and no explicit destination
         folder was specified. In this mode the proposed operations will be chosen so
         that both source folders are equal afterwards. Also the merge result will be
         written to both folders. Default is off.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Copy newer instead of merging (unsafe)</guilabel></term><listitem><para>
         Instead of merging the proposed operation will copy the newer source if changes
         happened. (Considered unsafe, because it implies that you know, that the other
         file hasn't been edited too. Check to make sure in every case.) Default is off.</para></listitem></varlistentry>
   <varlistentry><term><guilabel>Backup files (.orig)</guilabel></term><listitem><para>
         If a file or complete folder is replaced by another or is deleted then the
         original version will be renamed with an <literal role="extension">.orig</literal>
         extension. If an old backup file with <literal role="extension">.orig</literal>
         extension already exists then this will be deleted without backup. This also
         affects the normal merging of single files, not only in folder-merge mode.
         Default is on.</para></listitem></varlistentry>
</variablelist>
</sect1>

<sect1 id="other"><title>Other Functions in Folder Merge Window</title>
<sect2><title>Split/Full Screen Mode</title>
<para>
   Usually the folder-merge list view remains visible while a single file is compared or merged. With the mouse you can move the splitter bar that separates the file list from the text-diff windows. If you don't want this, you can disable <menuchoice><guimenu>Folder</guimenu><guimenuitem>Folder &amp;&amp; Text Split Screen View</guimenuitem></menuchoice> menu item. Then you can use <menuchoice><guimenu>Folder</guimenu><guimenuitem>Toggle View</guimenuitem></menuchoice> menu item to switch between the file list and the text-diff view that then occupy the full screen.
</para>
</sect2>
<sect2><title>Comparing or Merging a Single File</title>
<para>
   Probably you will prefer a simple double mouse click on a file in order
   to compare it. Nevertheless there also exists an entry in the <guimenu>Folder</guimenu>
   menu. You can also directly merge a single file by selecting it and choosing
   <menuchoice><guimenu>Merge</guimenu><guimenuitem>Merge Current File</guimenuitem></menuchoice>
   menu item. On saving the result, the status will be set to done, and the file
   will not be merged again if a folder merge is started.
</para><para>
   But note that this status information will be lost when you rerun a folder
   scan: <menuchoice><guimenu>Folder</guimenu><guimenuitem>Rescan</guimenuitem></menuchoice>
</para>
</sect2>
<sect2><title>Comparing or Merging Files with Different Names</title>
<para>
   Sometimes you need to compare or merge files with different names (&eg; the current
   file and the backup in the same folder).
</para><para>
   Select the exact file by clicking onto the icon in the column <guilabel>A</guilabel>, <guilabel>B</guilabel> or <guilabel>C</guilabel>. The first file selected thus will be marked with an <guilabel>A</guilabel>, the second and third with <guilabel>B</guilabel> and <guilabel>C</guilabel> regardless on what column they are in. Only up to three files can be chosen like this.
</para><para>
   Proceed by choosing <menuchoice><guimenu>Folder</guimenu><guimenuitem>Compare Explicitly Selected Files</guimenuitem></menuchoice> or <menuchoice><guimenu>Folder</guimenu><guimenuitem>Merge Explicitly Selected Files</guimenuitem></menuchoice> menu item. For your convenience these menu entries also appear as context menu when you right-click the last selected file.
</para><para>
   The comparison or merge of a file will happen in the same window.
   If this method is used for folders a new window will be opened.
</para></sect2>
</sect1>
</chapter>

<chapter id="misc">
<title>Miscellaneous Topics</title>
<sect1 id="networktransparency">
<title>Network transparency via KIO</title>
<sect2><title>KIO-Slaves</title>
<para>
The KIO library from &frameworks; supports network transparency via KIO-slaves.
&kdiff3; uses this for reading input files and for scanning folders.
This means that you can specify files and folders on local and
remote resources via &URL;s.
</para><para>
Example:
</para><para>
<screen>
   <command>kdiff3</command> test.cpp  ftp://ftp.faraway.org/test.cpp
   <command>kdiff3</command> tar:/home/hacker/archive.tar.gz/folder ./folder
</screen>
</para>
<para>The first line compares a local file with a file on an &FTP; server. The second line
compares a folder within an compressed archive with a local folder.
</para><para>
Other KIO-slaves that are interesting are:
</para>
<itemizedlist>
<listitem><para>Files from the WWW (http:),</para></listitem>
<listitem><para>Files from the &FTP; (ftp:),</para></listitem>
<listitem><para>Encrypted file transfer (fish:, sftp:),</para></listitem>
<listitem><para>&Windows; resources (smb:),</para></listitem>
<listitem><para>Local files (file:),</para></listitem>
</itemizedlist>
<para>
Other things that are possible, but probably less useful are:
</para>
<itemizedlist>
<listitem><para>Man-pages (man:),</para></listitem>
<listitem><para>Info-pages (info:),</para></listitem>
</itemizedlist>
</sect2>

<sect2><title>How To Write &URL;s</title>
<para>
   An &URL; has a different syntax compared with paths for local files and folders.
   Some things should be considered:
</para>
<itemizedlist>
<listitem><para>
   A path can be relative and can contain "." or "..". This is not possible for &URL;s
   which are always absolute.
</para></listitem><listitem><para>
   Special characters must be written with "escaping". ("<literal>#</literal>" -&gt; "<literal>%23</literal>", space -&gt;"<literal>%20</literal>", &etc;)
   E.g. a file with the name "<literal>#</literal>foo<literal>#</literal>" would have the &URL; "file:/<literal>%23</literal>foo<literal>%23</literal>".
</para></listitem><listitem><para>
   When &URL;s don't work as expected, try to open them in &konqueror; first.
</para></listitem>
</itemizedlist>

</sect2>

<sect2><title>Capabilities of KIO-Slaves</title>
<para>
   Network transparency has one drawback: Not all resources have the same capabilities.
</para><para>
   Sometimes this is due to the file system of the server, sometimes due to the protocol.
   Here is a short list of restrictions:
</para>
<itemizedlist>
<listitem><para>
   Sometimes there is no support for links.
</para></listitem><listitem><para>
   Or there is no way to distinguish if a link points to a file or a folder; always
   assuming a file. (ftp:, sftp:).
</para></listitem><listitem><para>
   Can't always determine the filesize.
</para></listitem><listitem><para>
   Limited support for permissions.
</para></listitem><listitem><para>
   No possibility to modify permissions or modification time, so permissions or time
   of a copy will differ from the original. (See the <guilabel>Trust the size (unsafe)</guilabel> option.)
   (To modify permissions or modification time is only possible for local files.)
</para></listitem>
</itemizedlist>
</sect2>
</sect1>

<sect1 id="kpart">
<title>Using &kdiff3; as a KPart</title>
<para>
&kdiff3; is a KPart. Currently it implements the KParts::ReadOnlyPart interface.
</para><para>
It's main use is as difference-viewer in &kdevelop;. &kdevelop; always starts the
internal difference viewer first. To invoke &kdiff3; press the &RMB;
on the difference viewer window and select <guimenuitem>Show in KDiff3Part</guimenuitem> from the context menu.
</para><para>
&kdiff3; normally requires two complete files as input. When used as part &kdiff3;
will assume that the input file is a patch-file in the unified format. &kdiff3;
then retrieves the original filenames from the patch-file. At least one of
the two files must be available. &kdiff3; will then invoke <command>patch</command> to
recreate the second file.
</para><para>
In &dolphin; you can select a patch-file and select <menuchoice><guimenuitem>Preview
in</guimenuitem><guisubmenu>KDiff3Part</guisubmenu></menuchoice> item from the context
menu. Be aware that this won't work if none of the original files are available, and it
is not reliable if the original file(s) have changed since the patch-file was generated.
</para><para>
When run as a part &kdiff3; only provides the a two-file-diff, a very small toolbar
and menu. Merging or folder comparison are not supported then.
</para>
</sect1>

<sect1 id="git">
<title>Using &kdiff3; as a &git; Diff and Merging Tool</title>
<para>
    &kdiff3; can be used as a <ulink url="https://git-scm.com/">&git;</ulink> diff and merge tool.
</para>
<para>
    Just add the following lines into your <filename>gitconfig</filename> file.
</para>
<programlisting>
[diff]
        tool = kdiff3
[difftool "kdiff3"]
        path = &lt;path to kdiff3 binary in your system>
[difftool]
        prompt = false
        keepBackup = false
        trustExitCode = false
[merge]
        tool = kdiff3
[mergetool]
        prompt = false
        keepBackup = false
        keepTemporaries = false
[mergetool "kdiff3"]
        path = &lt;path to kdiff3 binary in your system>
</programlisting>
<para>
    Then to see the difference between two commits use <userinput>git difftool <replaceable>first_hash</replaceable> <replaceable>second_hash</replaceable> --tool=kdiff3 --cc <replaceable>some_file_in_the_git_tree</replaceable></userinput>
</para>
<para>
    To merge a branch with &kdiff3; use <userinput>git merge <replaceable>branch_name</replaceable> &amp;&amp; git mergetool --tool=kdiff3</userinput>
</para>
<para>
    After resolving merging conflicts in the <link linkend="synchronise_views">usual way</link> it is enough to commit the changes to do the job.
</para>
</sect1>
</chapter>

<chapter id="faq">
<title>Questions and Answers</title>

&reporting.bugs;
&updating.documentation;

<qandaset id="faqlist">

<qandaentry><question><para>
   Why is it called "&kdiff3;"?
</para></question><answer><para>
   Tools named <application>KDiff</application> and <application>KDiff2</application> (now called &kompare;) already exist. Also &kdiff3; should suggest that it can merge like the <command>diff3</command> tool in the Diff-Tool collection.
</para></answer></qandaentry>

<qandaentry><question><para>
   Why did I release it under GPL?
</para></question><answer><para>
   I'm using GPL programs for a very long time now and learned very much by
   having a look at many of the sources. Hence this is my "Thank You" to
   all programmers that also did so or will do the same.
</para></answer></qandaentry>

<qandaentry><question><para>
   Some buttons and functions are missing. What's wrong?
</para></question><answer><para>
   You compiled from source but you probably didn't specify the correct prefix
   for the installation. By default <command>cmake</command> wants to install in
   <filename class="directory">/usr/local</filename> but then the user-interface
   resource file (&ie; <filename>kdiff3ui.rc</filename>) can't be found. The
   <filename>README</filename> file contains more information about the correct prefix.
</para></answer></qandaentry>

<qandaentry><question><para>
   Often lines that are similar but not identical appear next to each other
   but sometimes not. Why?
</para></question><answer><para>
   Lines where only the amount of white space characters is different are
   treated as "equal" at first, while just one different non-white character
   causes the lines to be "different". If similar lines appear next to each
   other, this actually is coincidence but this fortunately is often the case.
   See also <link linkend="manualdiffhelp">Manual Diff Help</link>.
</para></answer></qandaentry>

<qandaentry><question><para>
   Why must all conflicts be solved before the merge result can be saved?
</para></question><answer><para>
   For each equal or different section the editor in the merge result window remembers where it begins or ends. This is needed so that conflicts can be solved manually by simply selecting the source button (<guilabel>A</guilabel>, <guilabel>B</guilabel> or <guilabel>C</guilabel>). This information is lost while saving as text and it is too much effort to create a special file format that supports saving and restoring all necessary information.
</para></answer></qandaentry>

<qandaentry><question><para>
   How can I synchronise the diff and merge views, so that all views show the same text position?
</para></question><answer><para>
  Click into the summary column left of the text. (<link linkend="synchronise_views">See also here.</link>)
</para></answer></qandaentry>

<qandaentry><question><para>
    Why does <userinput>git difftool --dir-diff</userinput> give "Mix of links and normal files error" when using KDiff3 as the difftool?
</para></question><answer><para>
    This is a side effect of git's internal workings. If you try to compare a previous revision to the current work tree git will compare actually files representing the past commit to symlinks pointing to the
    worktree. As of 1.9 KDiff3 defaults to having <guilabel>Follow file links</guilabel> and <guilabel>Follow folder links</guilabel> on. Prior to this they were off by default.
    This did not matter when not doing if "Full analysis" was also off. However, with <guilabel>Full analysis</guilabel> on KDiff3 would initially attempt to compare the path pointed to by a link rather than follow it.
    Prior to 1.8 the resulting error was ignored. However, 1.8 began reporting the error.
</para></answer></qandaentry>

<qandaentry><question><para>
   Why does the editor in the merge result window not have an "undo"-function?
</para></question><answer><para>
  This was too much effort until now. You can always restore a version from one source (<guilabel>A</guilabel>, <guilabel>B</guilabel> or <guilabel>C</guilabel>) by clicking the respective button. For big editing the use of another editor is recommended anyway.
</para></answer></qandaentry>

<qandaentry><question><para>
   When I removed some text, then suddenly "&lt;No src line&gt;" appeared
   and cannot be deleted. What does that mean and how can one remove this?
</para></question><answer><para>
   For each equal or different section the editor in the merge result window
   remembers where it begins or ends. "&lt;No src line&gt;" means that
   there is nothing left in a section, not even a new line character.
   This  can happen either while merging automatically or by editing. This is
   no problem, since this hint won't appear in the saved file. If you want
   the orignal source  back just select the section (click on the left summary
   column) and then click the source button with the needed contents
   (<guilabel>A</guilabel>/<guilabel>B</guilabel> or <guilabel>C</guilabel>).
</para></answer></qandaentry>

<qandaentry><question><para>
   Why doesn't &kdiff3; support syntax-highlighting?
</para></question><answer><para>
   &kdiff3; already uses many colors for difference highlighting. More
   highlighting would be confusing. Use another editor for this.
</para></answer></qandaentry>

<qandaentry><question><para>
   Can I use &kdiff3; to compare <trademark class="registered">
   OpenOffice.org</trademark>, <application>&Microsoft; Word</application>,
   <application>&Microsoft; Excel</application>, &PDF;, &etc; files?
</para></question><answer><para>
   Although &kdiff3; will analyse any kind of file the result will probably
   not be very satisfactory for you.
</para><para>
   &kdiff3; was made to compare pure text files. <trademark class="registered">
   OpenOffice.org</trademark>, <application>&Microsoft; Word</application>,
   <application>&Microsoft; Excel</application>, &etc; store much more information
   in the files (about fonts, pictures, pages, colors, &etc;) which &kdiff3; doesn't
   know about. So &kdiff3; will show you the contents of the file interpreted as
   pure text, but this might be unreadable or at least it will look very odd.
</para><para>
   Since most programs nowadays store their contents in &XML; format, you might
   be able to read it as pure text. So if the change was only small,
   &kdiff3; still might help you.
</para><para>
   The best solution if you only want to compare the text (without embedded objects like pictures) is to use <menuchoice><guimenu>Edit</guimenu><guimenuitem>Select All</guimenuitem></menuchoice> and <menuchoice><guimenu>Edit</guimenu><guimenuitem>Copy</guimenuitem></menuchoice> menu items in your program to copy the interesting text to the clipboard and then in &kdiff3; paste the text into either diff input window. (See also <link linkend="selections">Select, Copy And Paste</link>.)
</para></answer></qandaentry>

<qandaentry><question><para>
   Where has the folder option <guimenuitem>List only deltas</guimenuitem> gone?
</para></question><answer><para>
   There are now several <link linkend="selectingvisiblefiles">"Show" options</link> in the
   <guimenu>Folder</guimenu> menu. Disabling <guimenuitem>Show Identical Files</guimenuitem>
   will achieve what enabling <guimenuitem>List only deltas</guimenuitem> used to do.
</para></answer></qandaentry>

<qandaentry><question><para>
   How can I make a big selection in the diff input window
   because scrolling takes so long?
</para></question><answer><para>
   Start the selection as usual (click and hold the &LMB;). Then use the navigation keys (&eg; &PgUp;, &PgDn;) while holding the &LMB; down. (See also <link linkend="selections">Select, Copy And Paste</link>.)
</para></answer></qandaentry>

<qandaentry><question><para>
   There is so much information here, but your question is still not answered?
</para></question><answer><para>
   Please send me your question. I appreciate every comment.
</para></answer></qandaentry>

</qandaset>
</chapter>

<chapter id="credits">

<title>Credits and License</title>

<para>
&kdiff3; - File and Folder Comparison and Merge Tool
</para>
<para>
Program copyright 2002-2007 Joachim Eibl <email>joachim.eibl at gmx.de</email>
</para>
<para>
Several cool ideas and bugreports came from colleagues and many people out in the Wild Wild Web. Thank you!
</para>

<para>
Documentation Copyright &copy; 2002-2007 Joachim Eibl <email>joachim.eibl at gmx.de</email>
</para>

<para>
Documentation Copyright &copy; 2017-2019 Michael Reeves <email>reeves.87 at gmail.com</email>
</para>

<!-- TRANS:CREDIT_FOR_TRANSLATORS -->

&underFDL;               <!-- FDL: do not remove -->


&underGPL;        	 <!-- GPL License -->

</chapter>

&documentation.index;
</book>

<!--
Local Variables:
mode: sgml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
-->
